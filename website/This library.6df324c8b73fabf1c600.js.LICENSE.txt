/*
              * aria-rowindex is counted from 1 according to w3c spec;
              * parseInt with radix is 2x faster, then +, -, etc.
                  https://jsperf.com/number-vs-parseint-vs-plus/116
          */

/*
            Some benchmarks inspire me to use nextElementSibling
            https://jsperf.com/nextsibling-vs-childnodes-increment/2
        */

/*
            using target.offsetWidth instead of contentRect.width, because we need border-box sizing, 
            and { box: border-box } option does not work here
        */

/*
          When all row heights are different,
          we must "predict" them on the left of startIndex and on the right of endIndex(where they are invisible),
          basing on what we know: heights between startIndex and endIndex.
          Using simple average by default.
      */

/*
          getVisibleRangeStart works by "strict less" algo. It is good for startIndex,
          but for endIndex we need "<=", so adding 1 artificially.
      */

/*
      Column heights may change during scroll/width-change
  */

/*
      For 90% non-reactive solutions, which only provide new getRowData when data is changed, memo is ok.
      If RowComponent should be wrapped my mobx observer - non-memo version should be imported.
      memo(observer(RowComponentDefault)) will do the trick.
  */

/*
      Hmm, I can't put here more than ~ 3 000 000. Maybe need to put one more row in case this height is > 3 000 000
  */

/*
      tabIndex="0" is for proper keyboard nav
      https://bugzilla.mozilla.org/show_bug.cgi?id=1346159
  */

/*   increaseEndIndexIfNeededSync(){
         const currentVisibleDist = this.getDistanceBetweenIndexes( this.startIndex, this.endIndex );
         if( this.widgetHeight > this.virtualTopOffset + currentVisibleDist - this.scrollTop ){
             this.updateEndIndex();
         }
     }
  
     increaseEndIndexIfNeeded = debounce( this.increaseEndIndexIfNeededSync, END_INDEX_CHECK_INTERVAL );
  */

/* avoiding double destructurization via getExtraProps, so making prop object once */

/* harmony default export */

/*#__PURE__*/

/***/

// CONCATENATED MODULE: ./lib/List/common/Rows.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// console.log( "%d| was: %d; is: %d", index, sTree[N+index],newHeight)

// extracted by mini-css-extract-plugin

// this.increaseEndIndexIfNeeded.cancel();
