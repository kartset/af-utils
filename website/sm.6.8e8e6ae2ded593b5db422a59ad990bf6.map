{"version":3,"sources":["webpack:///./websiteSrc/routes.js","webpack:///./node_modules/raw-loader/dist/cjs.js \\.js$","webpack:///./websiteSrc/examples/list/simple.js?c258","webpack:///./websiteSrc/examples/list/withFeatures.js?b27a","webpack:///./websiteSrc/examples/table/formatCells.js?0cdc","webpack:///./websiteSrc/examples/table/headless.js?86aa","webpack:///./websiteSrc/examples/table/nonSticky.js?5049","webpack:///./websiteSrc/examples/table/observableCells.js?0aae","webpack:///./websiteSrc/examples/table/scrollToRow.js?8557","webpack:///./websiteSrc/examples/table/simple.js?46e1","webpack:///./websiteSrc/examples/table/sortable.js?a63c","webpack:///./websiteSrc/examples/table/styledColumns.js?2875","webpack:///./websiteSrc/examples/table/totals.js?dd6d","webpack:///./websiteSrc/examples/table/variableRowHeights.js?d7d6","webpack:///./websiteSrc/examples lazy \\.js$"],"names":["Code","require","Components","groupedMenu","keys","reduce","acc","path","set","slice","split","ComponentsMap","lazy","ExamplesMenu","toArr","obj","arr","v","a","k","find","el","name","children","push","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","Object","resolve","module","exports","webpackAsyncContext","Promise","then","ids","all"],"mappings":"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","file":"6.feae4a529325df458dd0.js","sourcesContent":["import set from \"lodash/set\";\r\nimport { lazy } from \"react\";\r\n\r\nconst toArr = ( obj, arr ) => {\r\n    let v, a;\r\n    for( let k in obj ) {\r\n        v = obj[ k ];\r\n        if( typeof v === \"object\" ){\r\n            a = arr.find( el => el.name === k );\r\n            if( !a ){\r\n                a = { name: k, children: [] };\r\n                arr.push( a );\r\n            }\r\n            toArr( v, a.children );\r\n        } else {\r\n            arr.push({\r\n                name: k,\r\n                path: `/examples/${v}`\r\n            });\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst Code = require.context( \"!!raw-loader!./examples\", true, /\\.js$/ );\r\nconst Components = require.context( \"./examples\", true, /\\.js$/, \"lazy\" );\r\n\r\nconst groupedMenu = Components.keys().reduce(( acc, path ) => set(\r\n    acc,\r\n    path.slice( 2, -3 ).split( \"/\" ),\r\n    path.slice( 2, -3 )\r\n), {});\r\n\r\nexport const ComponentsMap = Components.keys().reduce(( acc, path ) => {\r\n    acc[ path.slice( 2, -3 ) ] = [\r\n        lazy(() => Components( path )),\r\n        Code( path ).default,\r\n        path.slice( 2, -3 )\r\n    ];\r\n    return acc;\r\n}, {});\r\n\r\nexport const ExamplesMenu = toArr( groupedMenu, [] );","var map = {\n\t\"./list/simple.js\": 170,\n\t\"./list/withFeatures.js\": 171,\n\t\"./table/formatCells.js\": 172,\n\t\"./table/headless.js\": 173,\n\t\"./table/nonSticky.js\": 174,\n\t\"./table/observableCells.js\": 175,\n\t\"./table/scrollToRow.js\": 176,\n\t\"./table/simple.js\": 177,\n\t\"./table/sortable.js\": 178,\n\t\"./table/styledColumns.js\": 179,\n\t\"./table/totals.js\": 180,\n\t\"./table/variableRowHeights.js\": 181\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 169;","export default \"import React from \\\"react\\\";\\r\\nimport List from \\\"af-virtual-scroll/lib/List\\\";\\r\\n\\r\\nconst getRowData = index => `row ${index}`;\\r\\n\\r\\nconst SimpleList = ({ className }) => (\\r\\n    <List\\r\\n        fixedSize\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={500000}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default SimpleList;\";","export default \"import React, { useRef } from \\\"react\\\";\\r\\nimport List from \\\"af-virtual-scroll/lib/List\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\nimport { css } from \\\"@emotion/core\\\";\\r\\n\\r\\nconst wrapperCss = css`\\r\\n    display: flex;\\r\\n    flex-flow: column nowrap;\\r\\n`;\\r\\n\\r\\nconst rowCount = 100000;\\r\\n\\r\\nconst heights = times( rowCount, () => r( 50, 250 ) );\\r\\n\\r\\nconst getRowData = index => (\\r\\n    <div style={{\\r\\n        lineHeight: `${heights[index]}px`,\\r\\n        borderTop: \\\"1px solid #666\\\",\\r\\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\\r\\n    }}>\\r\\n        row{index}:&nbsp;{heights[index]}px\\r\\n    </div>\\r\\n);\\r\\n\\r\\nconst ListWithScrollToRowButton = ({ className }) => {\\r\\n\\r\\n    const dataRef = useRef();\\r\\n\\r\\n    const submitHandler = e => {\\r\\n        e.preventDefault();\\r\\n        const v = e.currentTarget.elements.scrollRow.value;\\r\\n        dataRef.current.scrollToRow( +v );\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <div css={wrapperCss} className={className}>\\r\\n            <form onSubmit={submitHandler}>\\r\\n                <label>\\r\\n                    Row:&nbsp;\\r\\n                    <input\\r\\n                        name=\\\"scrollRow\\\"\\r\\n                        type=\\\"number\\\"\\r\\n                        defaultValue=\\\"0\\\"\\r\\n                    />\\r\\n                </label>\\r\\n                <button type=\\\"submit\\\">\\r\\n                    Scroll\\r\\n                </button>\\r\\n            </form>\\r\\n            <List\\r\\n                dataRef={dataRef}\\r\\n                getRowData={getRowData}\\r\\n                rowCount={rowCount}\\r\\n            />\\r\\n        </div>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default ListWithScrollToRowButton;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\nimport faker from \\\"faker\\\";\\r\\n\\r\\nconst DFMT = new Intl.DateTimeFormat();\\r\\nconst NFMT = new Intl.NumberFormat();\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"num\\\",\\r\\n        label: \\\"Numeric\\\",\\r\\n        sort: \\\"numeric\\\",\\r\\n        format: cellData => NFMT.format( cellData ),\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"str\\\",\\r\\n        label: \\\"String\\\",\\r\\n        sort: \\\"locale\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"timeStamp\\\",\\r\\n        label: \\\"Date\\\",\\r\\n        format: cellData => DFMT.format( cellData ),\\r\\n        sort: \\\"numeric\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst rowCount = 5000;\\r\\n\\r\\nconst rows = times( rowCount, () => ({\\r\\n    num: r( 1, 20000 ) / 27,\\r\\n    str: faker.name.findName(),\\r\\n    timeStamp: r( 0, Date.now() )\\r\\n}));\\r\\n\\r\\nconst getRowData = index => rows[ index ];\\r\\n\\r\\nconst TableWithFormattedCell = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={rowCount}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default TableWithFormattedCell;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"a\\\",\\r\\n        label: \\\"a\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"b\\\",\\r\\n        label: \\\"b\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"c\\\",\\r\\n        label: \\\"c\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst getRowData = index => ({\\r\\n    a: index,\\r\\n    b: `cell_b_row: ${index}`,\\r\\n    c: `cell_c_row: ${index}`\\r\\n})\\r\\n\\r\\nconst SimpleHeadlessTable = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        headless\\r\\n        getRowData={getRowData}\\r\\n        rowCount={500}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default SimpleHeadlessTable;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"a\\\",\\r\\n        label: \\\"a\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"b\\\",\\r\\n        label: \\\"b\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"c\\\",\\r\\n        label: \\\"c\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst getRowData = index => ({\\r\\n    a: index,\\r\\n    b: `cell_b_row: ${index}`,\\r\\n    c: `cell_c_row: ${index}`\\r\\n})\\r\\n\\r\\nconst NonStickyTable = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        nonSticky\\r\\n        rowCount={500}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default NonStickyTable;\";","export default \"import React, { memo, useEffect, useState, useCallback } from \\\"react\\\";\\r\\nimport { observable } from \\\"mobx\\\";\\r\\nimport { observer } from \\\"mobx-react-lite\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport DefaultCellComponent from \\\"af-virtual-scroll/lib/Table/common/Cell\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport { css } from \\\"@emotion/core\\\";\\r\\n\\r\\nconst hueBlockCss = css`\\r\\n    padding: 0.5em;\\r\\n    border-radius: 5px;\\r\\n`;\\r\\n\\r\\nconst renderHue = cellData => (\\r\\n    <div\\r\\n        css={hueBlockCss}\\r\\n        style={{ background: `hsl(${cellData},90%,70%)` }}\\r\\n    >\\r\\n        hue:&nbsp;{cellData}\\r\\n    </div>\\r\\n)\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"n1\\\",\\r\\n        label: \\\"N1\\\",\\r\\n        width: 100,\\r\\n        render: renderHue\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"n2\\\",\\r\\n        label: \\\"N2\\\",\\r\\n        width: 100,\\r\\n        render: renderHue\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"n3\\\",\\r\\n        label: \\\"N3\\\",\\r\\n        width: 100,\\r\\n        render: renderHue\\r\\n    }\\r\\n];\\r\\n\\r\\nconst rowCount = 200;\\r\\n\\r\\nconst CellComponent = memo(observer(DefaultCellComponent))\\r\\n\\r\\nconst TableWithObservableRows = ({ className }) => {\\r\\n\\r\\n    const [ rows ] = useState(() => {\\r\\n        const r = observable([]);\\r\\n\\r\\n        for( let j = 0; j < rowCount; j++ ){\\r\\n            r.push({ n1: 0, n2: 0, n3: 0 });\\r\\n        }\\r\\n\\r\\n        return r;\\r\\n    });\\r\\n\\r\\n    /* useCallback prevents table from unnecessary rerenders */\\r\\n    const getRowData = useCallback( index => rows[ index ], [ rows ]);\\r\\n\\r\\n    useEffect(() => {\\r\\n        const intervalHandle = setInterval(() => {\\r\\n            for( let j = 0; j < 50; j++ ){\\r\\n                rows[r(0,rowCount-1)][ `n${r(1,3)}` ] = r( 0, 360 );\\r\\n            }\\r\\n        }, 1000 );\\r\\n\\r\\n        return () => {\\r\\n            clearInterval( intervalHandle );\\r\\n        };\\r\\n    }, [ rows ]);\\r\\n\\r\\n    return (\\r\\n        <Table\\r\\n            className={className}\\r\\n            CellComponent={CellComponent}\\r\\n            getRowData={getRowData}\\r\\n            rowCount={rowCount}\\r\\n            columns={columns}\\r\\n        />\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default TableWithObservableRows;\";","export default \"import React, { useRef } from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport { css } from \\\"@emotion/core\\\";\\r\\n\\r\\nconst wrapperCss = css`\\r\\n    display: flex;\\r\\n    flex-flow: column nowrap;\\r\\n`;\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"a\\\",\\r\\n        label: \\\"a\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"b\\\",\\r\\n        label: \\\"b\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"c\\\",\\r\\n        label: \\\"c\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst getRowData = index => ({\\r\\n    a: index,\\r\\n    b: `cell_b_row: ${index}`,\\r\\n    c: `cell_c_row: ${index}`\\r\\n})\\r\\n\\r\\nconst TableWithScrollToRowButton = ({ className }) => {\\r\\n\\r\\n    const dataRef = useRef();\\r\\n\\r\\n    const submitHandler = e => {\\r\\n        e.preventDefault();\\r\\n        const v = e.currentTarget.elements.scrollRow.value;\\r\\n        dataRef.current.scrollToRow( +v );\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <div css={wrapperCss} className={className}>\\r\\n            <form onSubmit={submitHandler}>\\r\\n                <label>\\r\\n                    Row:&nbsp;\\r\\n                    <input\\r\\n                        name=\\\"scrollRow\\\"\\r\\n                        type=\\\"number\\\"\\r\\n                        defaultValue=\\\"0\\\"\\r\\n                    />\\r\\n                </label>\\r\\n                <button type=\\\"submit\\\">\\r\\n                    Scroll\\r\\n                </button>\\r\\n            </form>\\r\\n            <Table\\r\\n                dataRef={dataRef}\\r\\n                getRowData={getRowData}\\r\\n                rowCount={50000}\\r\\n                columns={columns}\\r\\n            />\\r\\n        </div>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default TableWithScrollToRowButton;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"a\\\",\\r\\n        label: \\\"a\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"b\\\",\\r\\n        label: \\\"b\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"c\\\",\\r\\n        label: \\\"c\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst getRowData = index => ({\\r\\n    a: index,\\r\\n    b: `cell_b_row: ${index}`,\\r\\n    c: `cell_c_row: ${index}`\\r\\n})\\r\\n\\r\\nconst SimpleTable = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={500}\\r\\n        columns={columns}\\r\\n        estimatedRowHeight={200}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default SimpleTable;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\nimport faker from \\\"faker\\\";\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"num\\\",\\r\\n        label: \\\"Numeric\\\",\\r\\n        sort: \\\"numeric\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"str\\\",\\r\\n        label: \\\"String\\\",\\r\\n        sort: \\\"locale\\\"\\r\\n    }\\r\\n];\\r\\n\\r\\nconst rowCount = 5000;\\r\\n\\r\\nconst rows = times( rowCount, () => ({\\r\\n    num: r( 1, 20000 ),\\r\\n    str: faker.name.findName()\\r\\n}));\\r\\n\\r\\nconst getRowData = index => rows[ index ];\\r\\n\\r\\nconst SortableTable = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={rowCount}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default SortableTable;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\nimport range from \\\"lodash/range\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport { css } from \\\"@emotion/core\\\";\\r\\n\\r\\nconst wrapperCss = css`\\r\\n    table {\\r\\n        border-spacing: 0;\\r\\n    }\\r\\n    tr[data-odd]{\\r\\n        background: rgba(0,0,0,0.2)\\r\\n    }\\r\\n`;\\r\\n\\r\\nconst colCount = 5;\\r\\n\\r\\nconst getRowExtraProps = ( rowData, rowDataIndex ) => rowDataIndex % 2 ? { \\\"data-odd\\\": \\\"\\\" } : null;\\r\\n\\r\\nconst columns = times( colCount, colIndex => ({\\r\\n    dataKey: `col${colIndex}`,\\r\\n    label: `col${colIndex}`,\\r\\n    background: `hsl(${Math.floor(360/colCount*colIndex)},80%,80%)`,\\r\\n    width: r( 50, 300 )\\r\\n}));\\r\\n\\r\\nconst getRowData = index => range( colCount ).reduce(( acc, colIndex ) => {\\r\\n    acc[ `col${colIndex}` ] = index;\\r\\n    return acc;\\r\\n}, {});\\r\\n\\r\\nconst totals = range( colCount ).reduce(( acc, colIndex ) => {\\r\\n    acc[ `col${colIndex}` ] = [ \\\"count\\\" ];\\r\\n    return acc;\\r\\n}, {});\\r\\n\\r\\nconst TableWithStyledColumns = ({ className }) => (\\r\\n    <Table\\r\\n        getRowExtraProps={getRowExtraProps}\\r\\n        css={wrapperCss}\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={500}\\r\\n        totals={totals}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default TableWithStyledColumns;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\n\\r\\nconst columns = [\\r\\n    { dataKey: \\\"n1\\\", label: \\\"N1\\\" },\\r\\n    { dataKey: \\\"n2\\\", label: \\\"N2\\\" },\\r\\n    { dataKey: \\\"n3\\\", label: \\\"N3\\\" },\\r\\n    { dataKey: \\\"n4\\\", label: \\\"N4\\\" },\\r\\n];\\r\\n\\r\\nconst rowCount = 5000;\\r\\n\\r\\nconst rows = times( rowCount, () => ({\\r\\n    n1: r( 1, 20000 ),\\r\\n    n2: r( 1, 20000 ),\\r\\n    n3: r( 1, 20000 ),\\r\\n    n4: r( 1, 20000 )\\r\\n}));\\r\\n\\r\\nconst totals = {\\r\\n    n1: [ \\\"count\\\" ],\\r\\n    n2: [ \\\"sum\\\", \\\"max\\\" ],\\r\\n    n3: [ \\\"average\\\", \\\"min\\\" ],\\r\\n    n4: [ \\\"count\\\", \\\"sum\\\", \\\"average\\\" ]\\r\\n};\\r\\n\\r\\nconst getRowData = index => rows[ index ];\\r\\n\\r\\nconst TableWithTotals = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        getRowData={getRowData}\\r\\n        rowCount={rowCount}\\r\\n        columns={columns}\\r\\n        totals={totals}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default TableWithTotals;\";","export default \"import React from \\\"react\\\";\\r\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\r\\nimport r from \\\"lodash/random\\\";\\r\\nimport times from \\\"lodash/times\\\";\\r\\nimport faker from \\\"faker\\\";\\r\\n\\r\\nconst columns = [\\r\\n    {\\r\\n        dataKey: \\\"rowIndex\\\",\\r\\n        label: \\\"Row index\\\",\\r\\n        getCellData: ( rowData, i ) => i\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"num\\\",\\r\\n        label: \\\"Numeric\\\",\\r\\n        sort: \\\"numeric\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"str\\\",\\r\\n        label: \\\"String\\\",\\r\\n        sort: \\\"locale\\\"\\r\\n    },\\r\\n    {\\r\\n        dataKey: \\\"rect\\\",\\r\\n        label: \\\"Rectangle\\\",\\r\\n        render: cellData => (\\r\\n            <div style={{\\r\\n                lineHeight: `${cellData}px`,\\r\\n                background: `hsl(${r(0,360)},50%,50%)`\\r\\n            }}>\\r\\n                height: {cellData}px\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n];\\r\\n\\r\\nconst rowCount = 100000;\\r\\n\\r\\nconst rows = times( rowCount, () => ({\\r\\n    num: r( 1, 20000 ),\\r\\n    str: faker.name.findName(),\\r\\n    rect: r( 50, 250 )\\r\\n}));\\r\\n\\r\\nconst getRowData = index => rows[ index ];\\r\\n\\r\\nconst totals = {\\r\\n    num: [ \\\"sum\\\", \\\"count\\\" ]\\r\\n};\\r\\n\\r\\nconst VariableRowHeightsTable = ({ className }) => (\\r\\n    <Table\\r\\n        className={className}\\r\\n        totals={totals}\\r\\n        getRowData={getRowData}\\r\\n        estimatedRowHeight={300}\\r\\n        rowCount={rowCount}\\r\\n        columns={columns}\\r\\n    />\\r\\n);\\r\\n\\r\\nexport default VariableRowHeightsTable;\";","var map = {\n\t\"./list/simple.js\": [\n\t\t217,\n\t\t0,\n\t\t1,\n\t\t19\n\t],\n\t\"./list/withFeatures.js\": [\n\t\t270,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./table/formatCells.js\": [\n\t\t271,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t11\n\t],\n\t\"./table/headless.js\": [\n\t\t1327,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t20\n\t],\n\t\"./table/nonSticky.js\": [\n\t\t1328,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t21\n\t],\n\t\"./table/observableCells.js\": [\n\t\t1329,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t12\n\t],\n\t\"./table/scrollToRow.js\": [\n\t\t1330,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t22\n\t],\n\t\"./table/simple.js\": [\n\t\t1331,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t23\n\t],\n\t\"./table/sortable.js\": [\n\t\t1332,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t13\n\t],\n\t\"./table/styledColumns.js\": [\n\t\t1333,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t9,\n\t\t24\n\t],\n\t\"./table/totals.js\": [\n\t\t1337,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t14\n\t],\n\t\"./table/variableRowHeights.js\": [\n\t\t1338,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t15\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 182;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}