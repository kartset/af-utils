{"version":3,"sources":["webpack:///./node_modules/mobx-react-lite/dist/mobxreactlite.esm.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"names":["Error","globalIsUsingStaticRendering","isUsingStaticRendering","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","useForceUpdate","setTick","tick","printDebugValue","v","reactionCleanupHandle","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","uncommittedReactionRefs","Set","ensureCleanupTimerRunning","undefined","setTimeout","cleanUncommittedReactions","now","Date","forEach","ref","tracking","current","cleanAt","reaction","dispose","delete","size","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","useObserver","fn","options","forceUpdate","reactionTrackingRef","useRef","newReaction","trackingData","mounted","createTrackingData","add","rendering","exception","useDebugValue","useEffect","reactionRef","Infinity","track","e","observer","baseComponent","memoComponent","base","realOptions","forwardRef","displayName","name","wrappedComponent","props","keys","hoistBlackList","defineProperty","getOwnPropertyDescriptor","$$typeof","render","compare","type","ObserverComponent","_ref","children","component","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","propTypes","_assertThisInitialized","self","ReferenceError"],"mappings":"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","file":"20.b0bacd467bb9ccd7f2f1.js","sourcesContent":["import { spy, configure, getDependencyTree, Reaction, observable, runInAction, transaction } from 'mobx';\nimport React, { useState, useCallback, memo, forwardRef } from 'react';\n\nif (!useState) {\n  throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\n\nif (!spy) {\n  throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\");\n}\n\nvar globalIsUsingStaticRendering = false;\nfunction useStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction useForceUpdate() {\n  var _useState = useState(0),\n      setTick = _useState[1];\n\n  var update = useCallback(function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  return !proto || proto === Object.prototype;\n}\nfunction getSymbol(name) {\n  if (typeof Symbol === \"function\") {\n    return Symbol.for(name);\n  }\n\n  return \"__$mobx-react \" + name + \"__\";\n}\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n\n  return mockGlobal;\n}\n\nvar observerBatchingConfiguredSymbol =\n/*#__PURE__*/\ngetSymbol(\"observerBatching\");\nvar observerBatching = function observerBatching(reactionScheduler) {\n  if (typeof reactionScheduler === \"function\") {\n    configure({\n      reactionScheduler: reactionScheduler\n    });\n  }\n\n  getGlobal()[observerBatchingConfiguredSymbol] = true;\n};\nvar observerBatchingOptOut = function observerBatchingOptOut() {\n  configure({\n    reactionScheduler: undefined\n  });\n  getGlobal()[observerBatchingConfiguredSymbol] = true;\n};\nvar isObserverBatched = function isObserverBatched() {\n  return getGlobal()[observerBatchingConfiguredSymbol];\n};\n\nfunction printDebugValue(v) {\n  return getDependencyTree(v);\n}\n\nfunction createTrackingData(reaction) {\n  var trackingData = {\n    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n    reaction: reaction\n  };\n  return trackingData;\n}\n/**\r\n * The minimum time before we'll clean up a Reaction created in a render\r\n * for a component that hasn't managed to run its effects. This needs to\r\n * be big enough to ensure that a component won't turn up and have its\r\n * effects run without being re-rendered.\r\n */\n\nvar CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\r\n * The frequency with which we'll check for leaked reactions.\r\n */\n\nvar CLEANUP_TIMER_LOOP_MILLIS = 10000;\n/**\r\n * Reactions created by components that have yet to be fully mounted.\r\n */\n\nvar uncommittedReactionRefs =\n/*#__PURE__*/\nnew Set();\n/**\r\n * Latest 'uncommitted reactions' cleanup timer handle.\r\n */\n\nvar reactionCleanupHandle;\n\nfunction ensureCleanupTimerRunning() {\n  if (reactionCleanupHandle === undefined) {\n    reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n  }\n}\n\nfunction scheduleCleanupOfReactionIfLeaked(ref) {\n  uncommittedReactionRefs.add(ref);\n  ensureCleanupTimerRunning();\n}\nfunction recordReactionAsCommitted(reactionRef) {\n  uncommittedReactionRefs.delete(reactionRef);\n}\n/**\r\n * Run by the cleanup timer to dispose any outstanding reactions\r\n */\n\nfunction cleanUncommittedReactions() {\n  reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n  // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n  var now = Date.now();\n  uncommittedReactionRefs.forEach(function (ref) {\n    var tracking = ref.current;\n\n    if (tracking) {\n      if (now >= tracking.cleanAt) {\n        // It's time to tidy up this leaked reaction.\n        tracking.reaction.dispose();\n        ref.current = null;\n        uncommittedReactionRefs.delete(ref);\n      }\n    }\n  });\n\n  if (uncommittedReactionRefs.size > 0) {\n    // We've just finished a round of cleanups but there are still\n    // some leak candidates outstanding.\n    ensureCleanupTimerRunning();\n  }\n}\n\nvar EMPTY_OBJECT = {};\n\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\" + baseComponentName;\n}\n\nvar warnedAboutBatching = false;\nfunction useObserver(fn, baseComponentName, options) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n\n  if (options === void 0) {\n    options = EMPTY_OBJECT;\n  }\n\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && !warnedAboutBatching && !isObserverBatched()) {\n    console.warn(\"[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching\");\n    warnedAboutBatching = true;\n  }\n\n  var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;\n  var forceUpdate = wantedForceUpdateHook(); // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n  var reactionTrackingRef = React.useRef(null);\n\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.  The easiest way to do that is just to\n        // drop our current reaction and allow useEffect() to recreate it.\n        newReaction.dispose();\n        reactionTrackingRef.current = null;\n      }\n    });\n    var trackingData = createTrackingData(newReaction);\n    reactionTrackingRef.current = trackingData;\n    scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n  }\n\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true;\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This is either due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up, or we got a observable change\n      // between render and useEffect\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          forceUpdate();\n        }),\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n\n  if (exception) {\n    throw exception; // re-throw any exceptions catched during rendering\n  }\n\n  return rendering;\n}\n\nfunction observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = _extends({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n\n  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n\nfunction ObserverComponent(_ref) {\n  var children = _ref.children,\n      render = _ref.render;\n  var component = children || render;\n\n  if (typeof component !== \"function\") {\n    return null;\n  }\n\n  return useObserver(component);\n}\n\nObserverComponent.propTypes = {\n  children: ObserverPropsCheck,\n  render: ObserverPropsCheck\n};\nObserverComponent.displayName = \"Observer\";\n\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === \"children\" ? \"render\" : \"children\";\n  var hasProp = typeof props[key] === \"function\";\n  var hasExtraProp = typeof props[extraKey] === \"function\";\n\n  if (hasProp && hasExtraProp) {\n    return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n  }\n\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n\n  return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + typeof props[key] + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n}\n\nfunction useAsObservableSourceInternal(current, usedByLocalStore) {\n  var culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\";\n\n  if (process.env.NODE_ENV !== \"production\" && usedByLocalStore) {\n    var _React$useState = React.useState(current),\n        initialSource = _React$useState[0];\n\n    if (initialSource !== undefined && current === undefined || initialSource === undefined && current !== undefined) {\n      throw new Error(\"make sure you never pass `undefined` to \" + culprit);\n    }\n  }\n\n  if (usedByLocalStore && current === undefined) {\n    return undefined;\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && !isPlainObject(current)) {\n    throw new Error(culprit + \" expects a plain object as \" + (usedByLocalStore ? \"second\" : \"first\") + \" argument\");\n  }\n\n  var _React$useState2 = React.useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  }),\n      res = _React$useState2[0];\n\n  if (process.env.NODE_ENV !== \"production\" && Object.keys(res).length !== Object.keys(current).length) {\n    throw new Error(\"the shape of objects passed to \" + culprit + \" should be stable\");\n  }\n\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\nfunction useAsObservableSource(current) {\n  return useAsObservableSourceInternal(current, false);\n}\n\nfunction useLocalStore(initializer, current) {\n  var source = useAsObservableSourceInternal(current, true);\n  return React.useState(function () {\n    var local = observable(initializer(source));\n\n    if (isPlainObject(local)) {\n      runInAction(function () {\n        Object.keys(local).forEach(function (key) {\n          var value = local[key];\n\n          if (typeof value === \"function\") {\n            // @ts-ignore No idea why ts2536 is popping out here\n            local[key] = wrapInTransaction(value, local);\n          }\n        });\n      });\n    }\n\n    return local;\n  })[0];\n} // tslint:disable-next-line: ban-types\n\nfunction wrapInTransaction(fn, context) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return transaction(function () {\n      return fn.apply(context, args);\n    });\n  };\n}\n\nexport { ObserverComponent as Observer, isObserverBatched, isUsingStaticRendering, observer, observerBatching, observerBatchingOptOut, useAsObservableSource, useForceUpdate, useLocalStore, useObserver, useStaticRendering };\n//# sourceMappingURL=mobxreactlite.esm.js.map\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}"],"sourceRoot":""}