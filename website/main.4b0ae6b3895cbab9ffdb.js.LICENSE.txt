/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/

/*
         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
         * the stack when an exception occurs while debugging.
         */

/*
         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
         */

/*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */

/*
The only reason for this file to exist is pure horror:
Without it rollup can make the bundling fail at any point in time; when it rolls up the files in the wrong order
it will cause undefined errors (for example because super classes or local variables not being hoisted).
With this file that will still happen,
but at least in this file we can magically reorder the imports with trial and error until the build succeeds again.
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* #__PURE__ */

/* 0 */

/* 1 */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 56 */

/* 57 */

/* 58 */

/* 59 */

/* 6 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

/* 65 */

/* 7 */

/* 8 */

/* 9 */

/* App is deployed to github pages, so BrowserRouter would not work there */

/* Math.imul(h, m): */

/* Math.imul(k, m): */

/* WEBPACK VAR INJECTION */

/* binding */

/* eslint-disable */

/* eslint-disable no-unused-vars */

/* eslint-disable-next-line jsx-a11y/anchor-has-content */

/* for generated name */

/* global Reflect, Promise */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* import() */

/* istanbul ignore next */

/* k >>> r: */

/* reexport */

/* see #1208 */

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/*#__PURE__*/

/**
         * 'guid' for general purpose. Will be persisted amongst resets.
         */

/**
         * (Experimental)
         * Warn if observables are accessed outside a reactive context
         */

/**
         * (Experimental)
         * Warn if you try to create to derivation / reactive context without accessing any observable.
         */

/**
         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
         */

/**
         * Are we currently processing reactions?
         */

/**
         * Are we in a batch block? (and how many of them)
         */

/**
         * Are we running a computation currently? (not a reaction)
         */

/**
         * Currently running derivation
         */

/**
         * Each time a derivation is tracked, it is assigned a unique run-id
         */

/**
         * Globally attached error handlers that react specifically to errors in reactions
         */

/**
         * If strict mode is enabled, state changes are by default not allowed
         */

/**
         * Is it allowed to change observables at this point?
         * In general, MobX doesn't allow that when running computations and React.render.
         * To ensure that those functions stay pure.
         */

/**
         * Is it allowed to read observables at this point?
         * Used to hold the state needed for `observableRequiresReaction`
         */

/**
         * List of scheduled, not yet executed, reactions.
         */

/**
         * MobXGlobals version.
         * MobX compatiblity with other versions loaded in memory as long as this version matches.
         * It indicates that the global state still stores similar information
         *
         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
         * internal state storage of MobX, and can be the same across many different package versions
         */

/**
         * Observables that don't have observers anymore, and are about to be
         * suspended, unless somebody else accesses it in the same batch
         *
         * @type {IObservable[]}
         */

/**
         * Simple optimization, give each derivation run an unique id (runId)
         * Check if last time this observable was accessed the same runId is used
         * if this is the case, the relation is already known
         */

/**
         * Spy callbacks
         */

/**
         * This happens if a property is accessed through the prototype chain, but the property was
         * declared directly as own property on the prototype.
         *
         * E.g.:
         * class A {
         * }
         * extendObservable(A.prototype, { x: 1 })
         *
         * classB extens A {
         * }
         * console.log(new B().x)
         *
         * It is unclear whether the property should be considered 'static' or inherited.
         * Either use `console.log(A.x)`
         * or: decorate(A, { x: observable })
         *
         * When using decorate, the property will always be redeclared as own property on the actual instance
         */

/**
         * Warn if computed values are accessed outside a reactive context
         */

/**
         * globally unique token to signal unchanged
         */

/**
     * Converts this array back to a (shallow) javascript structure.
     * For a deep clone use mobx.toJS
     */

/**
     * Create a new atom. For debugging purposes it is recommended to give it a name.
     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
     */

/**
     * Create a new computed value based on a function expression.
     *
     * The `name` property is for debug purposes only.
     *
     * The `equals` property specifies the comparer function to use to determine if a newly produced
     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
     * Structural comparison can be convenient if you always produce a new aggregated object and
     * don't want to notify observers if it is structurally the same.
     * This is useful for working with vectors, mouse coordinates etc.
     */

/**
     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
     */

/**
     * Invoke this method to notify mobx that your atom has been used somehow.
     * Returns true if there is currently a reactive context.
     */

/**
     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
     * for callback details
     */

/**
     * Returns a plain object that represents this map.
     * Note that all the keys being stringified.
     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
     */

/**
     * Returns a shallow non observable object clone of this map.
     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
     */

/**
     * Returns the current value of this computed value.
     * Will evaluate its computation first if needed.
     */

/**
     * internal, use schedule() if you intend to kick off a reaction
     */

/**
 * (c) Michel Weststrate 2015 - 2018
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Creates a history object that stores locations in memory.
 */

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */

/**
 * Expose `pathToRegexp`.
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */

/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */

/**
 * Makes sure that the provided function is invoked at most once.
 */

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Prints a deprecation message, but only one time.
 * Returns false if the deprecated message was already printed before
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * Public API for matching a URL pathname to a path.
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
 */

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

/**
 * Returns whether the argument is an array, disregarding observability.
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for a <Router> that uses HTML5 history.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

/**
 * The public API for matching a single path and rendering.
 */

/**
 * The public API for navigating programmatically with a component.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */

/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */

/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */

/** @class */

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type {!Array} */

/** @type {!Object} */

/** @type {string} */

/** Merge another object into this object, returns this. */

/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */

/************************************************************************/

/******/

/***/

//

//             " < " +

//             " because " +

//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance

//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance

//             min +

//             msg +

//             newDepState === IDerivationState.NOT_TRACKING)

//             observable.lowestObserverState

//         "INTERNAL ERROR there is no junk in map"

//         "lowestObserverState is wrong for " +

//         (newDepState === IDerivationState.POSSIBLY_STALE ||

//         const id = list[i].__mapid

//         fail("Illegal dependency state")

//         if (i) {

//         list.length === 0 || Object.keys(map).length === list.length - 1,

//         process.env.NODE_ENV === "production" &&

//         }

//         } else {

//     )

//     // it's expensive so better not run it in produciton. but temporarily helpful for testing

//     const l = list.length

//     const list = observable.observers

//     const map = observable.observersIndexes

//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)

//     const newDepState = (derivation as any).dependenciesState

//     for (let i = 0; i < l; i++) {

//     if (

//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`

//     invariant(

//     throw new Error(

//     }

//   0: it was set to 0 in last loop. don't need to do anything.

//   0: it's not in new observables, unobserve it

//   1: it keeps being observed, don't want to notify it. change to 0

//   1: it wasn't observed, let's observe it. set back to 0

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// $FlowFixMe

// $FlowFixMe we know it's not null

// 'm' and 'r' are mixing constants generated offline.

// *all* enumerables

// *own* symbols

// 0 means "already installed".

// @action fn() {}

// @action method() { }

// @action("name") fn() {}

// @computed

// @computed({ options })

// @decorator

// @decorator(args)

// @font-face, @page

// @import

// @import is generally only used for font faces from google fonts and etc.

// @observable someProp;

// A hashchange doesn't always == location change.

// A shallow dependency has changed since last computation and the derivation

// About 1.5x faster than the two-arg version of Array#splice()

// Add the first object to the stack of traversed objects.

// An `egal` comparison is performed for other numeric values.

// Assume equality for cyclic structures. The algorithm for detecting cyclic

// Avoid failures from read-only properties

// Build property key array from both strings and symbols

// But: https://github.com/mobxjs/mobx/issues/1556

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./node_modules/@emotion/core/dist/core.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/css/dist/css.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/hash/dist/hash.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/serialize/dist/serialize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/sheet/dist/sheet.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js

// CONCATENATED MODULE: ./node_modules/@juggle/resize-observer/lib/utils/element.js

// CONCATENATED MODULE: ./node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// CONCATENATED MODULE: ./node_modules/history/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ./node_modules/react-router/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// CONCATENATED MODULE: ./websiteSrc/index.js

// Called by Atom when its value changes

// Called by ComputedValue when it recalculate and its value changed

// Check if module is in cache

// Coerce dates and booleans to numeric primitive values. Dates are compared by their

// Compare `[[Class]]` names.

// Compare array lengths to determine if a deep comparison is necessary.

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289

// Create a new module (and put it into the cache)

// Deep compare each member

// Deep compare objects.

// Deep compare the contents, ignoring non-numeric properties.

// Detect buggy property enumeration order in older V8 versions.

// Directly return null if source is null

// Directly return the Date object itself if contained in the observable

// Do a few final mixes of the hash to ensure the last few

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@emotion/core/node_modules/@babel/runtime/helpers/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/mobx-react-lite/batchingForReactDom.js

// EXTERNAL MODULE: ./node_modules/path-to-regexp/index.js

// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js + 3 modules

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// Empty

// Ensure that both objects contain the same number of properties before comparing deep equality.

// Ensure the hash is encoded properly before doing anything else.

// Ensure we always have a properly-encoded hash.

// Execute the module function

// Exhaust primitive checks

// Extra process checks, as this happens during module initialization

// Fallback to the situation that source is an ObservableObject or a plain object

// Finally block can return (or yield) stuff..

// Fixes #1740

// Flag the module as loaded

// Forcing instance now, fixes hot reloadig issues on React Native:

// Go through all new observables and check diffValue: (now it should be unique)

// Go through all old observables and check diffValue: (it is unique after last bindDependencies)

// Handle the last few bytes of the input array

// Hence we work with two variables and check whether

// Hide this extra level by increasing the depth.

// IE 11 sometimes throws when accessing window.history.state

// Ideally we use for..of here, but the downcompiled version is really slow...

// Identical objects are equal. `0 === -0`, but they aren't identical.

// If the path exists, push it onto the end.

// Ignore already escaped sequences.

// Ignore extraneous popstate events in WebKit.

// Ignore this change; we already setState in push/replace.

// Implementation based on https://github.com/tj/co/blob/master/index.js

// Important!

// In non-strict mode we allow a slash at the end of match. If the path to

// Initialize the hash

// Initializers run lazily when transpiling to babel, so make sure they are run...

// Initializing stack of traversed objects.

// Inspired by https://github.com/garycourt/murmurhash-js

// Instead, we just default to 0 for keys we don't know.

// Instead, we just default to 0 for paths we don't know.

// Interceptor can modify the array, copy it to avoid concurrent modification, see #1950

// Internal recursive comparison function for `isEqual`.

// It's done here since we only need them for objects and arrays comparison.

// Iterate over the tokens and create our regexp string.

// JSONP chunk loading for javascript

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Linear search. Performance is inversely proportional to the number of

// MWE: not the fastest, but the easiest way :)

// MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient

// Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.

// Match Express-style parameters and un-named parameters with a prefix

// Match any characters still remaining.

// Match escaped characters that would otherwise appear in future matches.

// Mimic the behavior of DOM histories by

// Mix 4 bytes at a time into the hash

// N.B: we can't immediately invoke initializer; this would be wrong

// No Array.fill everywhere...

// Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,

// Object(NaN) is equivalent to NaN.

// Object.prototype.hasOwnProperty.call

// Objects with different constructors are not equivalent, but `Object`s or `Array`s

// One-arg form: push(location)

// Optimization: faster on decorator target or instance? Assuming target

// Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..

// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,

// Otherwise, if either of them == null they are not equal.

// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86

// Possible optimization: Don't have a separate map for non existing keys,

// Preact uses an empty array as children by

// Predefined bags of create observable options, to avoid allocating temporarily option objects

// Prepend partial segment prefixes.

// Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is

// Promise = chunk loading, 0 = chunk loaded

// Public interface

// Push the current path onto the tokens.

// Q: move into reaction runner?

// React 15 compat

// React v16.11 and below

// React v16.12 and above

// Recursively compare objects and arrays.

// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

// Remove the first object from the stack of traversed objects.

// Resolve incomplete/relative pathname relative to current location.

// Return false from a transition hook to cancel the transition.

// Return the exports of the module

// SVG-related properties

// See #1072

// See e.g. https://github.com/mobxjs/mobx/issues/859

// See https://github.com/ReactTraining/history/pull/289

// See perf test 'computed memoization'

// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).

// See: https://github.com/andykog/mobx-devtools/

// Should never be possible to change an observed observable from inside computed, see #798

// Should not be possible to change observed state outside strict mode, except during initialization, see #563

// Simple property that writes on first invocation to the current instance

// Some new observed derivations may become stale during this derivation computation

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// Strings, numbers, regular expressions, dates, and booleans are compared by value.

// TODO: If another transition starts while we're still confirming

// TODO: We could probably make this more reliable by

// TODO: check performance stats!

// TODO: ideally, value = change.value would be done here, so that values can be

// Test for strict equality first.

// The chunk loading function for additional chunks

// The module cache

// The require function

// They're not really 'magic', they just happen to work well.

// This allows the user to escape special characters that won't transform.

// This file contains only the entry chunk.

// This fixes #1796, because deleting a prop that has an

// This implementation is based heavily on node's url.parse

// This is a bit of a hack. We have to start listening for location

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// This works in non-strict mode

// Trampolining, if runReactions are already running, new reactions will be picked up

// Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

// Two-arg form: push(path, state)

// UNUSED EXPORTS: CacheProvider, ClassNames, ThemeContext, keyframes, withEmotionCache

// UNUSED EXPORTS: MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter, BrowserRouter, Link

// UNUSED EXPORTS: MemoryRouter, Prompt, StaticRouter, __HistoryContext, generatePath, useHistory, useRouteMatch, withRouter

// UNUSED EXPORTS: parsePath

// Unwrap any wrapped objects.

// Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,

// Use a negative lookahead to match only capturing groups.

// Used by JSON.stringify

// Used by computed when its dependency changed, but we don't wan't to immediately recompute.

// We can't use window.location.hash here because it's not

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

// We don't expect any of the above to throw, but better to be safe.

// We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863

// We return undefined, instead of nothing here, so it's

// We use React.Children.forEach instead of React.Children.toArray().find()

// When rendering in a static context,

// When there is no prior location and pathname is empty, set it to /

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// While running reactions, new reactions might be triggered.

// __webpack_public_path__

// _usually_(not always since there could be multiple style tags)

// `NaN`s are equivalent, but non-reflexive.

// `null` or `undefined` only equal to itself (strict comparison).

// a Promise means "currently loading".

// action("name", fn() {})

// action(fn() {})

// add a new item

// add entry module to deferred list

// add entry modules from loaded chunk to deferred list

// an async iterator

// and `derivation` is an observer of `obj`

// and delete them from the map, then merge the new map

// and optional suffixes. Matches appear as:

// and skip either the internal values map, or the base object with its property descriptors!

// and there will be very few iterations of this generally

// and we could have a special build just for that

// and you can only have one source map per style tag

// apply modifier

// apply to instance immediately

// array will be trimmed by bindDependencies

// as the second character will happen less often than

// as there is no efficient iterator that returns *all* properties

// at this point derivation is not holding any data about dependency tree

// at-rule

// avoid mem leaks in IE.

// babel / typescript

// babel only: @action method = () => {}

// backward compatibility

// be the first ones in prod and generally later in dev

// because computed props are declared on proty,

// because this module is primarily intended for the browser and node

// before being run or (outside batch and not being observed)

// best way to handle this.

// bound instance methods

// but it's also required in react native and similar environments sometimes

// but store them in the values map instead, using a special symbol to denote "not existing"

// but this is much easier and the native packages

// bytes are well-incorporated.

// cached from whatever global is present so that test runners that stub it

// causing a render after a cancelled POP.

// changed by interceptor. Same applies for other Set and Map api's.

// changes here in the constructor in case there are any <Redirect>s

// charcode for b

// charcode for l

// class name could be used further down

// component at different URLs.

// computed values are automatically teared down when the last observer leaves

// computed(expr, options?)

// conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

// consistent across browsers - Firefox will pre-decode it!

// const m = 0x5bd1e995;

// const r = 24;

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// currently only ComputedValue will propagate POSSIBLY_STALE

// debounced autorun

// default `noop` listener will not initialize the hook Set

// default, so use null if that's the case.

// define __esModule on exports

// define getter function for harmony exports

// delete the prop

// deleting last observer

// disposed during last run. Clean up everything that was bound after the dispose call.

// disposer function

// don't break things.  But we need to wrap it in a try catch in case it is

// don't have to recompute on every dependency change, but only when it's needed

// don't hoist over string (html) components

// during tracking it's an array with new observed observers

// easier to handle this case. if(!global) { ...}

// eat anything that promise would do, it's cancelled!

// empty string to avoid regexp issues

// equivalent to `new String("5")`.

// eslint-disable-line no-alert

// eslint-disable-line no-new-wrappers

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// filter out actions inside computations

// finalize string values (regular strings and functions interpolated into css calls)

// for a tiny bit of correctness that won't matter in the real world

// for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

// from different frames are.

// function because try/catches deoptimize in certain engines.

// function invariantLOS(observable: IObservable, msg: string) {

// function invariantObservers(observable: IObservable) {

// function invariantShouldCompute(derivation: IDerivation) {

// g can still be undefined, but nothing to do about it...

// get a new location before the <Router> is mounted.

// getDefaultExport function for compatibility with non-harmony modules

// grab all the keys that are present in the new map but not present in the current map

// having "@" as the first character

// having this state is second big optimization:

// here because toArray adds keys to all child elements and we do not want

// http://fb.me/prop-types-in-prod

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://esbench.com/bench/5b809c2cf2949800a0f61fb5

// if (adm.values.get(name as string)) return true

// if ComputedValue `obj` actually changed it will be computed and propagated to its observers.

// if clearTimeout wasn't available but was latter defined

// if disposed while running, clean up later. Maybe not optimal, but rare case

// if setTimeout wasn't available but was latter defined

// if this doesn't exist then it will be null so the style element will be appended

// if this observable had reactive observers, trigger the hooks

// ignore everything but left clicks

// in non-ending mode, where "/test/" shouldn't match "/test//route".

// in the majority of cases

// initialValue is the descriptor for get / set props

// insert keyframes

// install a JSONP callback for chunk loading

// intercept

// invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");

// invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");

// invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");

// invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");

// invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");

// invariantLOS(observable, "changed start");

// invariantLOS(observable, "confirmed start");

// invariantLOS(observable, "maybe start");

// invariantObservers(observable);

// invariantShouldCompute(derivation)

// is that other hash histories in the page will consider it a POP.

// is valid at the end of a path match, not in the middle. This is important

// it is an observable already, done

// it's 1 in dev because we insert source maps that map a single rule to a location

// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54

// keeping a list of keys we've seen in sessionStorage.

// keeping a list of paths we've seen in sessionStorage.

// key is the value of the data-emotion attribute, it's used to identify different sheets

// make certain babel optimisations not possible

// make sure object is observable, even without initial props

// make sure we start listening to future keys

// make sure we track the keys of the object

// match already ends with a slash, we remove it for consistency. The slash

// maybe it can be cancelled :)

// might use a different theme context in the future anyway

// millisecond representations. Note that invalid dates with millisecond representations

// mobx versions

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// never turn into an observable

// newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)

// no shallow dependency changed since last computation

// nodes we are looking at. Our value depends on these nodes

// normal autorun

// not hitting the condition

// not passing the registered cache to serializeStyles because it would

// not the most efficient thing ever but this is a pretty rare case

// note that we only do this here for optimization

// notify key and keyset listeners

// notify spy & observers

// numeric string

// object to store loaded and loading chunks

// observableValue might have changed it

// of `NaN` are not equivalent.

// on error function for async loading

// on the initial render. If there are, they will replace/push when

// onClick prevented default

// otherwise there will be an error

// otherwise, just box it

// out of bounds

// pre allocate array allocation + room for variation in deps

// prettier-ignore

// process.env.NODE_ENV !== "production" &&

// property

// rather setState here and ignore the hashchange. The caveat here

// read to subscribe

// reject our original promise

// return Reflect.ownKeys(this.values) as any

// run deferred modules when all chunks ready

// run deferred modules when ready

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// script path function

// selector

// set the new location immediately.

// setup Promise in chunk cache

// shim for using process in browser

// so that using `css` from `emotion` and passing the result to the css prop works

// so they have had no chance to propagate staleness (#916)

// so we don't have to add it to registered cache.

// so while this could be technically correct then it would be slower and larger

// some deep dependency changed, but don't know if shallow dependency changed

// something that can be converted and mutated?

// start chunk loading

// state propagation can occur outside of action/reactive context #2195

// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

// technically this means that the @import rules will

// the autorun wouldn't subscribe to future key changes (see also next comment)

// the batch is actually about to finish, all unobserving should happen here.

// the big drawback is that the css won't be editable in devtools

// the current instance might not have been initialized yet

// the matched portion of the URL

// the max length is how many rules we have per style tag, it's 65000 in speedy mode

// the path used to match

// the previous one, we may end up in a weird state. Figure out the

// the tree but if it's a string tag, we know it won't

// there could be a throwing finally block

// they mount and since cDM fires in children before parents, we may

// this ignores label

// this improves memory usage since we can avoid storing the whole style string

// this is a really hot path

// this is the ultrafast version, works across browsers

// this is what makes mobx fast

// this process happens recursively, this computed might be the last observabe of another, etc..

// this shouldn't really matter in the real world though

// this value could be converted to a new observable data structure, return it

// this weirdness brought to you by firefox

// this will cause reactions only on changed values

// to check for cycles

// to is absolute

// to is relative, drop the filename

// to trigger an unmount/remount for two <Route>s that render the same

// todo: replace with atom (breaking change)

// typescript

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// undefined value won't retrigger a observer (no visible effect),

// unique nested structures.

// unreachable

// update at index in range

// use Context.read for the theme when it's stable

// using a global regex with .exec is stateful so lastIndex has to be reset each time

// v8 likes predictible objects

// valid for arrays as well

// value might have been changed

// we are not interested in the value *or* exception at this moment, but if there is one, notify all

// we check the second character first because having "i"

// we converge to no remaining reactions after a while.

// we don't use globalState for these in order to avoid possible issues with multiple

// we need to insert @import rules before anything else

// we only need to add the styles to the registered cache if the

// we start at 1 since we've already handled the first arg

// we're doing this to avoid preconstruct's dead code elimination in this one case

// webpackBootstrap

// weird trick to keep our typings nicely with our funcs, and still extend the observable function

// when when somebody has screwed with setTimeout but no I.E. maddness

// where is the property declared?

// whether or not we matched exactly

// will need to recompute when it's needed next.

// will require to check first if UP_TO_DATE or POSSIBLY_STALE

// won't recalculate derivation

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// }

//normal enviroments in sane situations
