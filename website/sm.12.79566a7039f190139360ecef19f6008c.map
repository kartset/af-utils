{"version":3,"sources":["webpack:///./websiteSrc/examples/table/observableCells.js","webpack:///./node_modules/lodash/_isIterateeCall.js","webpack:///./node_modules/lodash/random.js","webpack:///./node_modules/lodash/_baseRandom.js"],"names":["hueBlockCss","renderHue","cellData","css","style","background","columns","dataKey","label","width","render","CellComponent","memo","observer","DefaultCellComponent","TableWithObservableRows","className","rows","useState","r","observable","j","push","n1","n2","n3","getRowData","useCallback","index","useEffect","intervalHandle","setInterval","rowCount","clearInterval","eq","isArrayLike","isIndex","isObject","module","exports","value","object","type","length","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","Math","min","nativeRandom","random","lower","upper","floating","undefined","temp","rand","nativeFloor","floor"],"mappings":";8IAQA,IAAMA,EAAc,CAAH,wFAKXC,EAAY,SAAAC,GAAQ,OACtB,mBACIC,IAAKH,EACLI,MAAO,CAAEC,WAAY,OAAOH,EAAT,cAFvB,QAIeA,IAIbI,EAAU,CACZ,CACIC,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,GAEZ,CACIM,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,GAEZ,CACIM,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,IAMVU,EAAgBC,eAAKC,YAASC,MAwCrBC,UAtCiB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,UAEvBC,EAASC,oBAAS,WAGtB,IAFA,IAAMC,EAAIC,qBAAW,IAEZC,EAAI,EAAGA,EATP,IASqBA,IAC1BF,EAAEG,KAAK,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAG/B,OAAON,KAToC,GAazCO,EAAaC,uBAAa,SAAAC,GAAK,OAAIX,EAAMW,KAAS,CAAEX,IAc1D,OAZAY,qBAAU,WACN,IAAMC,EAAiBC,aAAY,WAC/B,IAAK,IAAIV,EAAI,EAAGA,EAAI,GAAIA,IACpBJ,EAAKE,IAAE,EAAEa,MAAT,IAA2Bb,IAAE,EAAE,IAASA,IAAG,EAAG,OAEnD,KAEH,OAAO,WACHc,cAAeH,MAEpB,CAAEb,IAGD,YAAC,IAAD,CACID,UAAWA,EACXL,cAAeA,EACfe,WAAYA,EACZM,SApCK,IAqCL1B,QAASA,M,mBChFrB,IAAI4B,EAAK,EAAQ,IACbC,EAAc,EAAQ,IACtBC,EAAU,EAAQ,IAClBC,EAAW,EAAQ,IA0BvBC,EAAOC,QAdP,SAAwBC,EAAOZ,EAAOa,GACpC,IAAKJ,EAASI,GACZ,OAAO,EAET,IAAIC,SAAcd,EAClB,SAAY,UAARc,EACKP,EAAYM,IAAWL,EAAQR,EAAOa,EAAOE,QACrC,UAARD,GAAoBd,KAASa,IAE7BP,EAAGO,EAAOb,GAAQY,K,mBCxB7B,IAAII,EAAa,EAAQ,IACrBC,EAAiB,EAAQ,IACzBC,EAAW,EAAQ,IAGnBC,EAAiBC,WAGjBC,EAAYC,KAAKC,IACjBC,EAAeF,KAAKG,OAwExBf,EAAOC,QAvCP,SAAgBe,EAAOC,EAAOC,GA2B5B,GA1BIA,GAA+B,kBAAZA,GAAyBX,EAAeS,EAAOC,EAAOC,KAC3ED,EAAQC,OAAWC,QAEJA,IAAbD,IACkB,kBAATD,GACTC,EAAWD,EACXA,OAAQE,GAEe,kBAATH,IACdE,EAAWF,EACXA,OAAQG,SAGEA,IAAVH,QAAiCG,IAAVF,GACzBD,EAAQ,EACRC,EAAQ,IAGRD,EAAQR,EAASQ,QACHG,IAAVF,GACFA,EAAQD,EACRA,EAAQ,GAERC,EAAQT,EAASS,IAGjBD,EAAQC,EAAO,CACjB,IAAIG,EAAOJ,EACXA,EAAQC,EACRA,EAAQG,EAEV,GAAIF,GAAYF,EAAQ,GAAKC,EAAQ,EAAG,CACtC,IAAII,EAAOP,IACX,OAAOH,EAAUK,EAASK,GAAQJ,EAAQD,EAAQP,EAAe,QAAUY,EAAO,IAAIhB,OAAS,KAAOY,GAExG,OAAOX,EAAWU,EAAOC,K,iBC7E3B,IAAIK,EAAcV,KAAKW,MACnBT,EAAeF,KAAKG,OAexBf,EAAOC,QAJP,SAAoBe,EAAOC,GACzB,OAAOD,EAAQM,EAAYR,KAAkBG,EAAQD,EAAQ","file":"12.752d4ca75f91b19b906d.js","sourcesContent":["import React, { memo, useEffect, useState, useCallback } from \"react\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport Table from \"af-virtual-scroll/lib/Table\";\nimport DefaultCellComponent from \"af-virtual-scroll/lib/Table/common/Cell\";\nimport r from \"lodash/random\";\nimport { css } from \"@emotion/core\";\n\nconst hueBlockCss = css`\n    padding: 0.5em;\n    border-radius: 5px;\n`;\n\nconst renderHue = cellData => (\n    <div\n        css={hueBlockCss}\n        style={{ background: `hsl(${cellData},90%,70%)` }}\n    >\n        hue:&nbsp;{cellData}\n    </div>\n)\n\nconst columns = [\n    {\n        dataKey: \"n1\",\n        label: \"N1\",\n        width: 100,\n        render: renderHue\n    },\n    {\n        dataKey: \"n2\",\n        label: \"N2\",\n        width: 100,\n        render: renderHue\n    },\n    {\n        dataKey: \"n3\",\n        label: \"N3\",\n        width: 100,\n        render: renderHue\n    }\n];\n\nconst rowCount = 200;\n\nconst CellComponent = memo(observer(DefaultCellComponent))\n\nconst TableWithObservableRows = ({ className }) => {\n\n    const [ rows ] = useState(() => {\n        const r = observable([]);\n\n        for( let j = 0; j < rowCount; j++ ){\n            r.push({ n1: 0, n2: 0, n3: 0 });\n        }\n\n        return r;\n    });\n\n    /* useCallback prevents table from unnecessary rerenders */\n    const getRowData = useCallback( index => rows[ index ], [ rows ]);\n\n    useEffect(() => {\n        const intervalHandle = setInterval(() => {\n            for( let j = 0; j < 50; j++ ){\n                rows[r(0,rowCount-1)][ `n${r(1,3)}` ] = r( 0, 360 );\n            }\n        }, 1000 );\n\n        return () => {\n            clearInterval( intervalHandle );\n        };\n    }, [ rows ]);\n\n    return (\n        <Table\n            className={className}\n            CellComponent={CellComponent}\n            getRowData={getRowData}\n            rowCount={rowCount}\n            columns={columns}\n        />\n    );\n};\n\nexport default TableWithObservableRows;","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n"],"sourceRoot":""}