{"version":3,"sources":["webpack:///./websiteSrc/examples/table/variableRowHeights.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/lodash/times.js","webpack:///./node_modules/lodash/_baseTimes.js","webpack:///./node_modules/lodash/_castFunction.js","webpack:///./node_modules/lodash/identity.js","webpack:///./node_modules/lodash/toInteger.js"],"names":["columns","dataKey","label","getCellData","rowData","i","sort","render","cellData","style","lineHeight","background","r","rows","times","num","str","faker","name","findName","rect","getRowData","index","totals","VariableRowHeightsTable","className","estimatedRowHeight","rowCount","_assertThisInitialized","self","ReferenceError","baseTimes","castFunction","toInteger","nativeMin","Math","min","module","exports","n","iteratee","length","result","Array","identity","value","toFinite","remainder"],"mappings":";sEAAA,kFAMMA,EAAU,CACZ,CACIC,QAAS,WACTC,MAAO,YACPC,YAAa,SAAEC,EAASC,GAAX,OAAkBA,IAEnC,CACIJ,QAAS,MACTC,MAAO,UACPI,KAAM,WAEV,CACIL,QAAS,MACTC,MAAO,SACPI,KAAM,UAEV,CACIL,QAAS,OACTC,MAAO,YACPK,OAAQ,SAAAC,GAAQ,OACZ,mBAAKC,MAAO,CACRC,WAAeF,EAAL,KACVG,WAAY,OAAOC,IAAE,EAAE,KAAb,cAFd,WAIaJ,EAJb,SAYNK,EAAOC,IAFI,KAEa,iBAAO,CACjCC,IAAKH,IAAG,EAAG,KACXI,IAAKC,IAAMC,KAAKC,WAChBC,KAAMR,IAAG,GAAI,SAGXS,EAAa,SAAAC,GAAK,OAAIT,EAAMS,IAE5BC,EAAS,CACXR,IAAK,CAAE,MAAO,UAcHS,UAXiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC5B,YAAC,IAAD,CACIA,UAAWA,EACXF,OAAQA,EACRF,WAAYA,EACZK,mBAAoB,IACpBC,SApBS,IAqBT3B,QAASA,M,gCCzDF,SAAS4B,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,EALT,mC,mBCAA,IAAIE,EAAY,EAAQ,IACpBC,EAAe,EAAQ,IACvBC,EAAY,EAAQ,IASpBC,EAAYC,KAAKC,IAuCrBC,EAAOC,QAlBP,SAAeC,EAAGC,GAEhB,IADAD,EAAIN,EAAUM,IACN,GAAKA,EA7BQ,iBA8BnB,MAAO,GAET,IAAIjB,EA7BiB,WA8BjBmB,EAASP,EAAUK,EA9BF,YAgCrBC,EAAWR,EAAaQ,GACxBD,GAjCqB,WAoCrB,IADA,IAAIG,EAASX,EAAUU,EAAQD,KACtBlB,EAAQiB,GACfC,EAASlB,GAEX,OAAOoB,I,iBC5BTL,EAAOC,QAVP,SAAmBC,EAAGC,GAIpB,IAHA,IAAIlB,GAAS,EACToB,EAASC,MAAMJ,KAEVjB,EAAQiB,GACfG,EAAOpB,GAASkB,EAASlB,GAE3B,OAAOoB,I,mBChBT,IAAIE,EAAW,EAAQ,IAavBP,EAAOC,QAJP,SAAsBO,GACpB,MAAuB,mBAATA,EAAsBA,EAAQD,I,iBCU9CP,EAAOC,QAJP,SAAkBO,GAChB,OAAOA,I,mBCjBT,IAAIC,EAAW,EAAQ,IAmCvBT,EAAOC,QAPP,SAAmBO,GACjB,IAAIH,EAASI,EAASD,GAClBE,EAAYL,EAAS,EAEzB,OAAOA,GAAWA,EAAUK,EAAYL,EAASK,EAAYL,EAAU","file":"12.e8d0b1fd720e81fddbbd.js","sourcesContent":["import React from \"react\";\nimport Table from \"af-virtual-scroll/lib/Table\";\nimport r from \"lodash/random\";\nimport times from \"lodash/times\";\nimport faker from \"faker\";\n\nconst columns = [\n    {\n        dataKey: \"rowIndex\",\n        label: \"Row index\",\n        getCellData: ( rowData, i ) => i\n    },\n    {\n        dataKey: \"num\",\n        label: \"Numeric\",\n        sort: \"numeric\"\n    },\n    {\n        dataKey: \"str\",\n        label: \"String\",\n        sort: \"locale\"\n    },\n    {\n        dataKey: \"rect\",\n        label: \"Rectangle\",\n        render: cellData => (\n            <div style={{\n                lineHeight: `${cellData}px`,\n                background: `hsl(${r(0,360)},50%,50%)`\n            }}>\n                height: {cellData}px\n            </div>\n        )\n    }\n];\n\nconst rowCount = 100000;\n\nconst rows = times( rowCount, () => ({\n    num: r( 1, 20000 ),\n    str: faker.name.findName(),\n    rect: r( 50, 250 )\n}));\n\nconst getRowData = index => rows[ index ];\n\nconst totals = {\n    num: [ \"sum\", \"count\" ]\n};\n\nconst VariableRowHeightsTable = ({ className }) => (\n    <Table\n        className={className}\n        totals={totals}\n        getRowData={getRowData}\n        estimatedRowHeight={300}\n        rowCount={rowCount}\n        columns={columns}\n    />\n);\n\nexport default VariableRowHeightsTable;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n"],"sourceRoot":""}