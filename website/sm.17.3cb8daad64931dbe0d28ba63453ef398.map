{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack:///./src/utils/isPositionStickySupported/index.js","webpack:///./src/Context.js","webpack:///./src/utils/useStore/index.js","webpack:///./src/utils/debounce/index.js","webpack:///./src/utils/math/index.js","webpack:///./src/models/createTable.js","webpack:///./src/models/ListBase.js","webpack:///./src/models/FixedSizeTable.js","webpack:///./src/models/FixedSizeList.js","webpack:///./src/models/VariableSizeList.js","webpack:///./src/models/VariableSizeTable.js","webpack:///./src/utils/extraPropsGetters/index.js","webpack:///./src/Table/common/Row.js","webpack:///./src/Table/common/Cell.js","webpack:///./src/Table/common/TotalsCell.js","webpack:///./src/utils/cx/index.js","webpack:///./src/common/RowCountWarningContainer.js","webpack:///./src/useApi/index.js","webpack:///./src/Table/common/Colgroup.js","webpack:///./src/Table/NonSticky/TableWrapper/index.js","webpack:///./src/Table/common/HeaderCells.js","webpack:///./src/Table/common/Thead.js","webpack:///./src/Table/common/FooterCells.js","webpack:///./src/Table/common/Tfoot.js","webpack:///./src/Table/common/Rows.js","webpack:///./src/Table/common/Tbody.js","webpack:///./src/Table/common/BodyTable.js","webpack:///./src/Table/NonSticky/useColWidthsResizeObserver/index.js","webpack:///./src/common/Scroller.js","webpack:///./src/Table/common/TbodyScroller.js","webpack:///./src/common/HeightProvider.js","webpack:///./src/common/ScrollContainer.js","webpack:///./src/Table/NonSticky/index.js","webpack:///./src/Table/Sticky/index.js","webpack:///./src/commonDefaultProps.js","webpack:///./src/Table/index.js","webpack:///./websiteSrc/examples/table/simple.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/af-tools/lib/eventEmitters/Basic.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","elStyle","document","createElement","style","cssText","map","p","join","isSupported","position","includes","isPositionStickySupported","createContext","useStore","StoreConstructor","dataRef","propsToMerge","scrollContainerRef","useRef","rowsContainerRef","finalDataRef","Store","current","useEffect","merge","rowsContainerNode","scrollContainerNode","destructor","debounce","fn","delay","maxWait","timerId","lastInvokeStamp","invoke","context","stamp","call","undefined","cancelPendingCall","clearTimeout","resultFn","performance","now","this","setTimeout","cancel","add","a","b","subtract","OrderedRowsCache","Uint32Array","TbodyColumnWidthsCache","L","Intl","Collator","getValueForSorting","srcVal","rowIndex","fieldName","defaultValue","getRowData","getCellData","result","reduceRange","totalRows","dataKey","startValue","getNewRes","rowData","res","i","TotalsCachePart","count","sum","average","createTable","BaseClass","constructorCallback","columns","totals","headlessMode","sortColumnIndex","sortDirectionSign","scrollLeft","tbodyColumnWidthsSum","tbodyColumnWidths","orderedRows","totalsCache","refreshTotals","refreshTotalsSync","refreshSorting","sort","sorter","method","directionSign","compare","v1","v2","getSorter","rowDataGetter","emit","on","resetColumnWidthsCache","refreshRowsOrder","scrollToStart","refreshColumnWidthsSum","refreshTotalsForColumnRaw","cellDataGetter","curTotals","curCachePart","totalType","oldVal","newVal","tmpSum","j","length","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","Math","process","refreshTotalsForColumn","col","find","c","setSortParams","colIndex","rows","reduce","getRowDataInitial","Error","ListBase","startIndex","endIndex","virtualTopOffset","widgetScrollHeight","overscanRowsCount","estimatedRowHeight","scrollTop","widgetHeight","widgetWidth","rowKeyGetter","increaseEndIndexIfNeeded","increaseEndIndexIfNeededSync","updateWidgetScrollHeight","updateEndIndex","updateStartOffset","set","paramName","paramValue","params","k","currentVisibleDist","getDistanceBetweenIndexes","removeAllListeners","getVisibleRangeStart","newVisibleStartIndex","remainder","newStartIndex","max","overscanOffset","newEndIndex","min","scrollToRow","index","node","EventEmitter","updateEstimatedRowHeight","firstElementChild","offsetHeight","distance","SegmentsTreeCache","sTree","N","shouldResetInvisibleRowHeights","setVisibleRowsHeights","setVisibleRowsHeightsSync","prependListener","resetCache","reallocateCacheIfNeeded","markResetInvisibleRowHeights","calculateParentsInRange","newHeight","l","r","rowHeightsSum","rowCounter","child","nextElementSibling","parseInt","getAttribute","round","dist","v","nodeIndex","fill","suggestedN","log2","instance","getPropsGetter","propName","data","dataIndex","getExtraProps","props","extraProps","assign","getRowProps","getCellProps","Row","CellComponent","getRowExtraProps","getCellExtraProps","rowDataIndex","column","columnIndex","visibility","FinalCellComponent","key","propTypes","Cell","render","getEmptyCellData","format","cellData","TotalsCell","cellTotals","formatTotal","summaryType","title","className","cx","baseClass","extraClass","RowCountWarningContainer","reducer","x","useApi","subscribeEvents","API","useContext","Context","up","useReducer","useLayoutEffect","off","commonSubscribeEvents","nonStickySubscribeEvents","Colgroup","useTbodyWidths","useApiPlugin","background","border","width","memo","SUBSCRIBE_EVENTS","TableWrapper","children","marginLeft","aria-colcount","SortDirections","HeaderCells","label","data-sortable","aria-colindex","aria-sort","Thead","trRef","getCellStyle","clickHandler","useCallback","e","target","onClick","ref","FooterCells","TotalsCellComponent","curTotalsCache","Tfoot","Rows","RowComponent","rangeFrom","rangeTo","getRowKey","rowKey","idx","push","getVisibleRows","Tbody","tbodyRef","BodyTable","aria-rowcount","useColWidthsResizeObserver","observerRef","mutationObserverRef","RO","MO","ResizeObserver","entries","offsetWidth","MutationObserver","addedNodes","removedNodes","observe","unobserve","disconnect","trNode","childList","Scroller","Component","aria-hidden","height","TbodyScroller","el","HeightProvider","cloneElement","ScrollContainer","forwardRef","onScroll","reportScrollLeft","scrollHandler","R","tabIndex","NonSticky","widthsObserverRef","Sticky","commonDefaultProps","fixedSize","rowCount","Table","rowCountWarningsTable","headless","nonSticky","FixedSizeTableStore","VariableSizeTableStore","ComponentVariant","StickyComponent","NonStickyComponent","Provider","value","defaultProps","RowComponentDefault","CellComponentDefault","TotalsCellComponentDefault","RowCountWarningContainerDefault","SimpleTable","_assertThisInitialized","self","ReferenceError","BasicEventEmitter","_T","_proto","_a","eventName","prepend","eventsQueue","indexOf","splice","_objectWithoutPropertiesLoose","source","excluded","sourceKeys","keys"],"mappings":"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","file":"17.020db6020b27769ad710.js","sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","const elStyle = document.createElement( \"a\" ).style;\nelStyle.cssText = [ \"\", \"-webkit-\", \"-ms-\" ].map( p => `position:${p}sticky` ).join( \";\" );\n\nconst isSupported = elStyle.position.includes( \"sticky\" );\n\nconst isPositionStickySupported = () => isSupported;\n\nexport default isPositionStickySupported;","import { createContext } from \"react\";\n\nexport default createContext();","import { useRef, useEffect } from \"react\";\n\n/*\n    dataRef is to call Data methods from outside( Data.scrollTo(), etc. ).\n    As it is not dom-related, I decided to avoid forwardRef\n*/\nconst useStore = ( StoreConstructor, dataRef, propsToMerge ) => {\n\n    const scrollContainerRef = useRef();\n    const rowsContainerRef = useRef();\n\n    const finalDataRef = useRef();\n\n    let Store = finalDataRef.current;\n\n    if( !Store || !( Store instanceof StoreConstructor ) ){\n        Store = finalDataRef.current = new StoreConstructor();\n    }\n\n    if( dataRef ){\n        dataRef.current = Store;\n    }\n\n    useEffect(() => {\n        Store.merge({\n            ...propsToMerge,\n            rowsContainerNode: rowsContainerRef.current,\n            scrollContainerNode: scrollContainerRef.current\n        });\n    });\n\n    useEffect(() => () => {\n        Store.destructor();\n    }, [ Store ]);\n\n    return [ Store, scrollContainerRef, rowsContainerRef ];\n};\n\nexport default useStore;","const debounce = ( fn, delay, maxWait ) => {\n\n    let timerId,\n        lastInvokeStamp = -1 * ( maxWait || 0 );\n\n    const invoke = ( context, stamp ) => {\n        fn.call( context );\n        lastInvokeStamp = stamp;\n        timerId = undefined;\n    };\n\n    const cancelPendingCall = () => {\n        if( timerId ){\n            clearTimeout( timerId );\n            timerId = undefined;\n        }\n    };\n\n    const resultFn = function(){\n        cancelPendingCall();\n        const stamp = performance.now();\n        if( maxWait && stamp - lastInvokeStamp > maxWait ){\n            invoke( this, stamp );\n        }\n        else{\n            timerId = setTimeout( invoke, delay, this, stamp );\n        }\n    };\n\n    resultFn.cancel = cancelPendingCall;\n\n    return resultFn;\n};\n\nexport default debounce;","export const add = ( a, b ) => a + b;\nexport const subtract = ( a, b ) => a - b;","import debounce from \"../utils/debounce\";\nimport { add, subtract } from \"../utils/math\";\n\nconst OrderedRowsCache = Uint32Array;\nconst TbodyColumnWidthsCache = Uint32Array;\n\nconst REFRESH_SORT_DEBOUNCE_INTERVAL = 500;\n\nconst L = new Intl.Collator();\n\nconst getValueForSorting = ( srcVal, rowIndex, fieldName, defaultValue, getRowData, getCellData ) => {\n    const result = getRowData( srcVal );\n    if( result ){\n        return getCellData ? getCellData( result, rowIndex ) : result[ fieldName ];\n    }\n    return defaultValue;\n}\n\nconst getSorter = ( getRowData, fieldName, method, getCellData, directionSign ) => {\n    const fn = method === \"locale\" ? L.compare : subtract;\n    const defaultValue = method === \"locale\" ? \"\" : 0;\n\n    return ( a, b, i ) => {\n        const v1 = getValueForSorting( a, i, fieldName, defaultValue, getRowData, getCellData );\n        const v2 = getValueForSorting( b, i, fieldName, defaultValue, getRowData, getCellData );\n        return fn( v1, v2 ) * directionSign;\n    };\n};\n\nconst reduceRange = ( totalRows, dataKey, getRowData, getCellData, startValue, getNewRes ) => {\n    let res = startValue;\n    for( let i = 0, rowData, cellData; i < totalRows; i++ ){\n        rowData = getRowData( i );\n        cellData = getCellData ? getCellData( rowData, i ) : rowData[ dataKey ];\n        res = getNewRes( res, cellData );\n    }\n    return res;\n}\n\n/*\n    We could use simple object literal,\n    but constructors with stable-order this initialization enforce \"hidden-classes\" v8 optimization\n*/\nclass TotalsCachePart {\n    count = 0;\n    sum = 0;\n    average = 0.0;\n};\n\n/*\n    can't extend from both FixedSizeList and VariableSizeList, so exporting compositor\n*/\nconst createTable = ( BaseClass, constructorCallback ) => class extends BaseClass {\n\n    columns = [];\n    totals = {};\n    headlessMode = false;\n\n    sortColumnIndex = -1;\n    sortDirectionSign = 1;\n\n    scrollLeft = 0;\n    tbodyColumnWidthsSum = 0;\n    tbodyColumnWidths = null;\n    orderedRows = new OrderedRowsCache( 0 );\n\n    /*\n        We do not want to recalculate totals too often, so caching them in object by column dataKey\n    */\n    totalsCache = Object.create( null );\n\n\n    /*\n        TODO:\n            make this call throttled\n    */\n\n    refreshTotalsForColumnRaw( dataKey, cellDataGetter ){\n        const curTotals = this.totals && this.totals[ dataKey ];\n        if( curTotals ){\n            let curCachePart = this.totalsCache[ dataKey ];\n\n            if( !curCachePart ){\n                curCachePart = this.totalsCache[ dataKey ] = new TotalsCachePart();\n            }\n            \n            for( let j = 0, totalType, oldVal, newVal, tmpSum; j < curTotals.length; j++ ){\n                totalType = curTotals[ j ];\n                oldVal = curCachePart[ totalType ];\n                switch( totalType ){\n                    case \"count\":\n                        newVal = this.totalRows;\n                        break;\n                    case \"sum\":\n                    case \"average\":\n                        if( tmpSum === undefined ){\n                            tmpSum = reduceRange( this.totalRows, dataKey, this.rowDataGetter, cellDataGetter, 0, add );\n                        }\n                        newVal = totalType === \"sum\" ? tmpSum : tmpSum / this.totalRows;\n                        break;\n                    case \"min\":\n                    case \"max\":\n                        newVal = reduceRange(\n                            this.totalRows,\n                            dataKey,\n                            this.rowDataGetter,\n                            cellDataGetter,\n                            totalType === \"min\" ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER,\n                            Math[totalType]\n                        );\n                        break;\n                    default:\n                        if( process.env.NODE_ENV !== \"production\" ){\n                            throw new Error( `Wrong total type: ${totalType}` );\n                        }\n                }\n  \n                if( oldVal !== newVal ){\n                    curCachePart[ totalType ] = newVal;\n                    this.emit( \"totals-calculated\" );\n                }\n            }\n        }\n        else if( process.env.NODE_ENV !== \"production\" ){\n            console.log( `Asked to recalculate totals for: ${dataKey}; doing nothing;` );\n        }\n        return this;\n    }\n\n    refreshTotalsForColumn( dataKey ){\n        const col = this.columns.find( c => c.dataKey === dataKey );\n        if( col ){\n            this.refreshTotalsForColumnRaw( dataKey, col.getCellData );\n        }\n        return this;\n    }\n\n    refreshTotalsSync(){\n        for( let j = 0, dataKey, getCellData; j < this.columns.length; j++ ){\n            ({ dataKey, getCellData } = this.columns[ j ]);\n            this.refreshTotalsForColumnRaw( dataKey, getCellData );\n        }\n    }\n\n    refreshTotals = debounce( this.refreshTotalsSync, 150 );\n\n    setSortParams( colIndex, sortDirectionSign ){\n        if( this.sortColumnIndex !== colIndex || sortDirectionSign !== this.sortDirectionSign ){\n            this.sortColumnIndex = colIndex;\n            this.sortDirectionSign = sortDirectionSign;\n            this.emit( \"sort-params-changed\" );\n        }\n    }\n\n    refreshSorting = debounce(() => {\n        if( this.sortColumnIndex > -1 && this.totalRows > 0 ){\n            const { sort, dataKey, getCellData } = this.columns[ this.sortColumnIndex ];\n            if( sort ){\n                const sorter = getSorter( this.rowDataGetter, dataKey, sort, getCellData, this.sortDirectionSign );\n                this.orderedRows.sort( sorter );\n                this.emit( \"#rowsOrder\" );\n            }\n        }\n    }, REFRESH_SORT_DEBOUNCE_INTERVAL );\n\n    refreshRowsOrder(){\n        if( this.orderedRows.length !== this.totalRows ){\n            const rows = this.orderedRows = new OrderedRowsCache( this.totalRows );\n            for( let j = 1; j < rows.length; j++ ){\n                rows[ j ] = j;\n            }\n        }\n        return this;\n    }\n\n    resetColumnWidthsCache(){\n        this.tbodyColumnWidths = new TbodyColumnWidthsCache( this.columns.length );\n    }\n\n    refreshColumnWidthsSum(){\n        this.tbodyColumnWidthsSum = this.tbodyColumnWidths.reduce( add );\n    }\n\n    constructor(){\n        super();\n\n        this\n            .on( \"#columns\", this.resetColumnWidthsCache )\n            .on( \"#columns\", this.refreshTotals )\n            .on( \"#columns\", this.refreshSorting )\n            .on( \"#totalRows\", this.refreshRowsOrder )\n            .on( \"#totalRows\", this.refreshSorting )\n            .on( \"#totalRows\", this.refreshTotals )\n            .on( \"sort-params-changed\", this.refreshSorting )\n            .on( \"#rowDataGetter\", this.refreshSorting )\n            .on( \"#rowDataGetter\", this.refreshTotals )\n            .on( \"#rowsOrder\", this.scrollToStart )\n            .on( \"#totals\", this.refreshTotals )\n            .on( \"tbody-column-widths-changed\", this.refreshColumnWidthsSum ) //for non-sticky\n        \n            .refreshRowsOrder();\n\n        if( constructorCallback ){\n            constructorCallback( this );\n        }\n    }\n\n    destructor(){\n        this.refreshSorting.cancel();\n        this.refreshTotals.cancel();\n        super.destructor();\n    }\n}\n\nexport default createTable;","import EventEmitter from \"af-tools/lib/eventEmitters/Basic\";\nimport debounce from \"../utils/debounce\";\n\nconst getRowDataInitial = () => {\n    throw new Error( \"getRowData must be provided\" );\n};\n\nconst END_INDEX_CHECK_INTERVAL = 400;\n\nclass ListBase extends EventEmitter {\n\n    totalRows = 0;\n    startIndex = 0;\n    endIndex = 0;\n\n    virtualTopOffset = 0;\n    widgetScrollHeight = 0;\n\n    overscanRowsCount = 0;\n    estimatedRowHeight = 0;\n\n    scrollTop = 0;\n    widgetHeight = 0;\n    widgetWidth = 0;\n\n    rowKeyGetter = undefined;\n    rowDataGetter = getRowDataInitial;\n    rowsContainerNode = null;\n    scrollContainerNode = null;\n\n    set( paramName, paramValue ){\n\n        if( process.env.NODE_ENV !== \"production\" ){\n            if( !this.hasOwnProperty( paramName ) ){\n                throw new Error( `Trying to merge key, which does not exist: ${paramName}` );\n            }\n        }\n\n        if( this[ paramName ] !== paramValue ){\n            this[ paramName ] = paramValue;\n            this.emit( `#${paramName}` );\n        }\n\n        return this;\n    }\n    \n    merge( params ){\n        for( let k in params ){\n            this.set( k, params[ k ] );\n        }\n        return this;\n    }\n    \n    constructor(){\n        super();\n        \n        if( process.env.NODE_ENV !== \"production\" ){\n            const absentMethods = [\n                \"updateWidgetScrollHeight\",\n                \"getDistanceBetweenIndexes\",\n                \"getVisibleRangeStart\"\n            ].filter( fn => !this[ fn ] );\n\n            if( absentMethods.length ){\n                throw new Error( `Absent methods: ${absentMethods.join( \",\" )}` );\n            }\n        }\n\n        this\n            .on( \"#totalRows\", this.updateWidgetScrollHeight )\n            .on( \"#totalRows\", this.updateEndIndex )\n            .on( \"#widgetScrollHeight\", this.increaseEndIndexIfNeeded )\n            .on( \"#endIndex\", this.increaseEndIndexIfNeeded.cancel )\n            .on( \"#scrollTop\", this.updateStartOffset )\n            .on( \"#overscanRowsCount\", this.updateStartOffset )\n            .on( \"#widgetHeight\", this.updateEndIndex )\n            .on( \"#startIndex\", this.updateEndIndex );\n    }\n\n    /*\n        Column heights may change during scroll/width-change\n    */\n    increaseEndIndexIfNeededSync(){\n        const currentVisibleDist = this.getDistanceBetweenIndexes( this.startIndex, this.endIndex );\n        if( this.widgetHeight > this.virtualTopOffset + currentVisibleDist - this.scrollTop ){\n            this.updateEndIndex();\n        }\n    }\n\n    increaseEndIndexIfNeeded = debounce( this.increaseEndIndexIfNeededSync, END_INDEX_CHECK_INTERVAL );\n\n    destructor(){\n        this.increaseEndIndexIfNeeded.cancel();\n        this.removeAllListeners();\n    }\n\n    updateStartOffset(){\n        const { scrollTop, overscanRowsCount } = this;\n        const [ newVisibleStartIndex, remainder ] = this.getVisibleRangeStart( scrollTop );\n        const newStartIndex = Math.max( 0, newVisibleStartIndex - overscanRowsCount );\n        const overscanOffset = this.getDistanceBetweenIndexes( newStartIndex, newVisibleStartIndex );\n                \n        return this\n            .set( \"virtualTopOffset\", scrollTop - remainder - overscanOffset )\n            .set( \"startIndex\", newStartIndex );\n    }\n\n    updateEndIndex(){\n\n        if( !this.estimatedRowHeight ){\n            return this.set( \"endIndex\", 0 );\n        }\n        \n        const [ newEndIndex ] = this.getVisibleRangeStart( this.scrollTop + this.widgetHeight );\n        /*\n            getVisibleRangeStart works by \"strict less\" algo. It is good for startIndex,\n            but for endIndex we need \"<=\", so adding 1 artificially.\n        */\n        return this.set( \"endIndex\", Math.min( newEndIndex + 1 + this.overscanRowsCount, this.totalRows ) );\n    }\n\n    scrollToRow( index ){\n        const node = this.scrollContainerNode;\n        if( node ){\n            index = Math.max( 0, Math.min( index, this.totalRows ) );\n            node.scrollTop = this.getDistanceBetweenIndexes( 0, index );\n        }\n        return this;    \n    }\n\n    scrollToStart(){\n        return this.scrollToRow( 0 );\n    }\n};\n\nexport default ListBase;","import createTable from \"./createTable\";\nimport FixedSizeList from \"./FixedSizeList\";\n\nexport default createTable( FixedSizeList );","import ListBase from \"./ListBase\";\n\nclass FixedSizeList extends ListBase {\n    \n    updateWidgetScrollHeight(){\n        return this.set( \"widgetScrollHeight\", this.estimatedRowHeight * this.totalRows );\n    }\n\n    updateEstimatedRowHeight(){\n        const node = this.rowsContainerNode;\n\n        if( node ){\n            const { firstElementChild } = node;\n            if( firstElementChild ){\n                this.set( \"estimatedRowHeight\", firstElementChild.offsetHeight );\n            }\n        }\n    }\n\n    getVisibleRangeStart( distance ){\n        const { estimatedRowHeight } = this;\n        return estimatedRowHeight ? [ distance / estimatedRowHeight | 0, distance % estimatedRowHeight ] : [ 0, 0 ];\n    }\n\n    constructor(){\n        super();\n\n        this\n            .on( \"#estimatedRowHeight\", this.updateWidgetScrollHeight )\n            .on( \"#widgetWidth\", this.updateEstimatedRowHeight );\n    }\n\n    getDistanceBetweenIndexes( startIndex, endIndex ){\n        return this.estimatedRowHeight * ( endIndex - startIndex );\n    }\n};\n\nexport default FixedSizeList;","import ListBase from \"./ListBase\";\nimport debounce from \"../utils/debounce\";\n\n// Uint16 cannot be used here, because array stores intermediate sums, which can be huge.\nconst SegmentsTreeCache = Uint32Array;\n\n/*\n    We should always have some extra space for new rows. We do not want to reallocate cache every time.\n*/\nconst MIN_TREE_CACHE_OFFSET = 15;\n\nconst ROW_MEASUREMENT_DEBOUNCE_INTERVAL = 150;\nconst ROW_MEASUREMENT_DEBOUNCE_MAXWAIT = 1000; \n\nclass VariableSizeList extends ListBase {\n\n    /*\n        Two vars for non-recursive segments tree;\n        Could just make [ 0, 0 ], but want to keep type of heightsCache always of same type.\n    */\n    sTree = new SegmentsTreeCache( 2 );\n    N = 1;\n\n    /*\n        When all row heights are different,\n        we must \"predict\" them on the left of startIndex and on the right of endIndex(where they are invisible),\n        basing on what we know: heights between startIndex and endIndex.\n        Using simple average by default.\n    */\n    shouldResetInvisibleRowHeights = true;\n\n    markResetInvisibleRowHeights(){\n        this.shouldResetInvisibleRowHeights = true;\n    }\n\n    updateWidgetScrollHeight(){\n        /* In segments tree 1 node is always sum of all elements */\n        return this.set( \"widgetScrollHeight\", this.sTree[ 1 ] );\n    }\n\n    calculateParentsInRange( startIndex, endIndex ){\n        const { sTree, N } = this;\n    \n        for( endIndex += N, startIndex += N; endIndex >>= 1; ){\n            for( let i = startIndex >>= 1; i <= endIndex; i++ ){\n                sTree[ i ] = sTree[ i << 1 ] + sTree[ i << 1 | 1 ];\n            }\n        }\n\n        return this;\n    }\n\n    setVisibleRowsHeightsSync(){\n        const node = this.rowsContainerNode;\n\n        if( node ){\n            const { sTree, N } = this;\n            \n            let l = -1,\n                r = -1,\n                rowHeightsSum = 0,\n                rowCounter = 0;\n\n            /*\n                Some benchmarks inspire me to use nextElementSibling\n                https://jsperf.com/nextsibling-vs-childnodes-increment/2\n            */\n            for( let child = node.firstElementChild, newHeight, index; child; child = child.nextElementSibling, rowCounter++ ){\n                \n                /*\n                    * aria-rowindex is counted from 1 according to w3c spec;\n                    * parseInt with radix is 2x faster, then +, -, etc.\n                      https://jsperf.com/number-vs-parseint-vs-plus/116\n                */\n                index = parseInt( child.getAttribute( \"aria-rowindex\" ), 10 ) - 1;\n\n                if( process.env.NODE_ENV !== \"production\" && Number.isNaN( index ) ){\n                    throw new Error( \"aria-rowindex attribute must be present on each row. Look at default Row implementations.\" );\n                }\n\n                newHeight = child.offsetHeight;\n                rowHeightsSum += newHeight;\n\n                if( sTree[ N + index ] !== newHeight ){\n                    // console.log( \"%d| was: %d; is: %d\", index, sTree[N+index],newHeight)\n                    sTree[ N + index ] = newHeight;\n                    \n                    if( l === -1 ){\n                        l = index;\n                    }\n                    \n                    r = index;\n                }\n            }\n \n            if( l !== -1 ){\n                if( process.env.NODE_ENV !== \"production\" ){\n                    console.log( \"Updating heights in range: %d - %d\", l, r );\n                }\n\n                if( this.shouldResetInvisibleRowHeights ){\n                    this.set( \"estimatedRowHeight\", Math.round( rowHeightsSum / rowCounter ) );\n                    this.shouldResetInvisibleRowHeights = false;\n                }\n                else{\n                    this\n                        .calculateParentsInRange( l, r )\n                        .updateWidgetScrollHeight();\n                }\n            }\n        }\n\n        return this;\n    }\n\n    setVisibleRowsHeights = debounce( this.setVisibleRowsHeightsSync, ROW_MEASUREMENT_DEBOUNCE_INTERVAL, ROW_MEASUREMENT_DEBOUNCE_MAXWAIT );\n   \n    getVisibleRangeStart( dist ){\n\n        const { estimatedRowHeight, sTree, N } = this;\n\n        if( estimatedRowHeight ){\n            let nodeIndex = 1, v;\n\n            while( nodeIndex < N ){\n                v = sTree[ nodeIndex <<= 1 ];\n                if( dist >= v ){\n                    dist -= v;\n                    nodeIndex |= 1;\n                }\n            }\n    \n            return [ nodeIndex - N, dist ];\n        }\n        \n        return [ 0, 0 ];\n    }\n\n    resetCache(){\n        const { sTree, estimatedRowHeight, N, totalRows } = this;\n        sTree.fill( estimatedRowHeight, N, N + totalRows );\n\n        /*\n            Trees are not always ideally allocated, gaps are possible.\n            Classical way for calculating parents is much simpler,\n            but can do much more work(summing zeros) in such conditions. Commented classic algo:\n    \n            for( let i = N + totalRows >> 1, j; i > 0; --i ){\n                j = i << 1;\n                sTree[ i ] = sTree[ j ] + sTree[ j | 1 ];\n            }\n        */\n        return estimatedRowHeight ? this.calculateParentsInRange( 0, totalRows ) : this;\n    }\n\n    reallocateCacheIfNeeded(){\n        /* Nearest pow of 2 to totalRows. 56 >= 64, 67 => 128, etc. */\n        const suggestedN = this.totalRows > 0 ? 2 << Math.log2( this.totalRows + MIN_TREE_CACHE_OFFSET ) : 1;\n\n        if( this.N !== suggestedN ){\n            this.N = suggestedN;\n            this.sTree = new SegmentsTreeCache( suggestedN << 1 );\n        }\n\n        return this;\n    }\n\n    constructor(){\n        super();\n\n        this\n            .prependListener( \"#totalRows\", this.resetCache )\n            .prependListener( \"#totalRows\", this.reallocateCacheIfNeeded )\n            .on( \"#estimatedRowHeight\", this.resetCache )\n            .on( \"#estimatedRowHeight\", this.updateWidgetScrollHeight )\n            .on( \"rows-rendered\", this.setVisibleRowsHeights )\n            .on( \"#widgetWidth\", this.markResetInvisibleRowHeights )\n            .on( \"#widgetWidth\", this.setVisibleRowsHeights );\n    }\n\n    destructor(){\n        this.setVisibleRowsHeights.cancel();\n        super.destructor();\n    }\n\n    getDistanceBetweenIndexes( startIndex, endIndex ){\n\n        if( !this.estimatedRowHeight ){\n            return 0;\n        }\n\n        const { sTree, N } = this;\n        let res = 0;\n\n        for( startIndex += N, endIndex += N; startIndex < endIndex; startIndex >>= 1, endIndex >>= 1 ){\n            if( startIndex & 1 ){\n                res += sTree[ startIndex++ ];\n            }\n\n            if( endIndex & 1 ){\n                res += sTree[ --endIndex ]; \n            }\n        };\n\n        return res; \n    }\n};\n\nexport default VariableSizeList;","import createTable from \"./createTable\";\nimport VariableSizeList from \"./VariableSizeList\";\n\nexport default createTable( VariableSizeList, instance => {\n    instance.prependListener( \"#rowsOrder\", instance.resetCache );\n});","const getPropsGetter = propName => ( data, index, dataIndex, getExtraProps ) => {\n\n    /* avoiding double destructurization via getExtraProps, so making prop object once */\n    const props = {\n        [propName]: index + 1\n    };\n\n    if( getExtraProps ){\n        const extraProps = getExtraProps( data, index, dataIndex );\n        if( extraProps ){\n            if( process.env.NODE_ENV !== \"production\" ){\n                if( extraProps.hasOwnProperty( propName ) ){\n                    throw new Error( `getExtraProps must not override ${propName}` );\n                }\n            }\n            Object.assign( props, extraProps );\n        }\n    }\n\n    return props;\n}\n\nexport const getRowProps = getPropsGetter( \"aria-rowindex\" );\nexport const getCellProps = getPropsGetter( \"aria-colindex\" );","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getRowProps } from \"../../utils/extraPropsGetters\";\n\nconst Row = ({ columns, CellComponent, getRowData, getRowExtraProps, getCellExtraProps, rowDataIndex, rowIndex }) => {\n\n    const rowData = getRowData( rowDataIndex );\n\n    return (\n        <tr {...getRowProps(rowData,rowIndex,rowDataIndex,getRowExtraProps)}>\n            {columns.map(( column, columnIndex ) => {\n                if( column.visibility === \"hidden\" ){\n                    return null;\n                }\n\n                const FinalCellComponent = column.CellComponent || CellComponent;\n\n                return (\n                    <FinalCellComponent\n                        key={column.dataKey}\n                        rowData={rowData}\n                        rowIndex={rowIndex}\n                        column={column}\n                        columnIndex={columnIndex}\n                        getCellExtraProps={column.getCellExtraProps||getCellExtraProps}\n                    />\n                );\n            })}\n        </tr>\n    );\n};\n\nRow.propTypes = {\n    columns: PropTypes.array.isRequired,\n    CellComponent: PropTypes.elementType.isRequired,\n    getRowData: PropTypes.func.isRequired,\n    rowIndex: PropTypes.number.isRequired,\n    rowDataIndex: PropTypes.number.isRequired,\n    getRowExtraProps: PropTypes.func,\n    getCellExtraProps: PropTypes.func\n};\n\nexport default Row;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getCellProps } from \"../../utils/extraPropsGetters\";\n\n/*\n    If all cells in a row would be completely empty - row can \"collapse\" short.\n    To prevent it we can fill it with &nbsp;\n*/\nconst DEFAULT_EMPTY_CELL_CONTENT = \"\\u00A0\";\n\nconst Cell = ({ rowData, rowIndex, column, columnIndex, getCellExtraProps }) => {\n    const { render, getEmptyCellData, dataKey, format, getCellData } = column;\n\n    let cellData = rowData && ( getCellData ? getCellData( rowData, rowIndex ) : rowData[ dataKey ] );\n    \n    if( cellData === undefined || cellData === \"\" ){\n        cellData = getEmptyCellData ? getEmptyCellData( rowIndex, column ) : DEFAULT_EMPTY_CELL_CONTENT;\n    }\n    else{\n        if( format ){\n            cellData = format( cellData, rowData );\n        }\n        if( render ){\n            cellData = render( cellData, rowData, column );\n        }\n    }\n\n    return (\n        <td {...getCellProps(rowData,columnIndex,columnIndex,getCellExtraProps)}>\n            {cellData}\n        </td>\n    );\n};\n\nCell.propTypes = {\n    rowIndex: PropTypes.number.isRequired,\n    columnIndex: PropTypes.number.isRequired,\n    column: PropTypes.object.isRequired,\n    rowData: PropTypes.object,\n    getCellExtraProps: PropTypes.func\n};\n\nexport default Cell;","import React from \"react\";\n\nconst TotalsCell = ({ cellTotals, totalsCache, formatTotal }) => {\n\n    if( !cellTotals || !totalsCache ){\n        return null;\n    }\n\n    if( cellTotals.length === 1 ){\n        const summaryType = cellTotals[ 0 ];\n        const res = totalsCache[ summaryType ];\n        return (\n            <div title={summaryType} className=\"afvscr-summary\">\n                {formatTotal?formatTotal(res):res}\n            </div>\n        );\n    }\n\n    return cellTotals.map( summaryType => {\n        const res = totalsCache[ summaryType ];\n        return res !== undefined ? (\n            <div key={summaryType} className=\"afvscr-summary\">\n                {summaryType}:&nbsp;{formatTotal?formatTotal(res):res}\n            </div>\n        ) : null;\n    });\n};\n\nexport default TotalsCell;","const cx = ( baseClass, extraClass ) => extraClass ? `${baseClass} ${extraClass}` : baseClass;\n\nexport default cx;","import React from \"react\";\nimport cx from \"../utils/cx\"\n\nconst RowCountWarningContainer = ({ className, ...props }) => <div className={cx(\"afvscr-row-count-warning-container\",className)} {...props} />;\n\nexport default RowCountWarningContainer;","import { useContext, useLayoutEffect, useReducer } from \"react\";\nimport Context from \"../Context\";\n\nconst reducer = x => x + 1;\n\n/*\n\tTODO:\n\t\twhy useEffect does not properly update colgroup of tbody, when rowcount changes from 0 to positive value?\n*/\n\nconst useApi = subscribeEvents => {\n\n\tconst API = useContext( Context );\n\n\tconst [, up] = useReducer( reducer, 0 );\n    \n\tuseLayoutEffect(() => {\n\t\tfor( let j = 0; j < subscribeEvents.length; j++ ){\n\t\t\tAPI.on( subscribeEvents[ j ], up );\n\t\t}\n\t\treturn () => {\n\t\t\tfor( let j = 0; j < subscribeEvents.length; j++ ){\n\t\t\t\tAPI.off( subscribeEvents[ j ], up );\n\t\t\t}\n\t\t};\n\t}, subscribeEvents );\n\n\treturn API;\n};\n\nexport default useApi;\n","import React, { memo } from \"react\";\nimport useApiPlugin from \"../../useApi\";\n\nconst commonSubscribeEvents = [ \"#columns\" ];\nconst nonStickySubscribeEvents = [ ...commonSubscribeEvents, \"tbody-column-widths-changed\" ];\n\nconst Colgroup = ({ useTbodyWidths }) => {\n\n    const { columns, tbodyColumnWidths } = useApiPlugin( useTbodyWidths ? nonStickySubscribeEvents : commonSubscribeEvents );\n\n    return (\n        <colgroup>\n            {columns.map(({ dataKey, background, visibility, border, width }, j ) => visibility !== \"hidden\" ? (\n                <col\n                    key={dataKey}\n                    style={{\n                        width: useTbodyWidths ? tbodyColumnWidths[ j ] : width,\n                        background,\n                        border\n                    }}\n                />\n            ) : null )}\n        </colgroup>\n    );\n};\n\nexport default memo( Colgroup );","import React from \"react\";\nimport useApi from \"../../../useApi\";\nimport Colgroup from \"../../common/Colgroup\";\nimport cx from \"../../../utils/cx\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#columns\",\n    \"#scrollLeft\",\n    \"#widgetWidth\",\n    \"tbody-column-widths-changed\"\n];\n\nconst TableWrapper = ({ children, className, ...props }) => {\n\n    const { scrollLeft, columns, tbodyColumnWidthsSum } = useApi( SUBSCRIBE_EVENTS );\n\n    const style = {\n        /* If we do this via transform translate, col background would have bugs during horizontal scroll. Strange webkit behavior */\n        marginLeft: -scrollLeft,\n        width: tbodyColumnWidthsSum\n    };\n\n    return (\n        <table className={cx(\"afvscr-nonst-subtable\",className)} {...props} style={style} aria-colcount={columns.length}>\n            <Colgroup useTbodyWidths />\n            {children}\n        </table>\n    );\n};\n\nexport default TableWrapper;","import React, { memo } from \"react\";\nimport useApi from \"../../useApi\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#columns\",\n    \"sort-params-changed\"\n];\n\nconst SortDirections = {\n    \"1\": \"ascending\",\n    \"-1\": \"descending\"\n};\n\nconst HeaderCells = () => {\n\n    const { columns, sortColumnIndex, sortDirectionSign } = useApi( SUBSCRIBE_EVENTS );\n\n    return columns.map(({ dataKey, title, sort, label, visibility }, j ) => visibility === \"hidden\" ? null : (\n        <th\n            key={dataKey}\n            title={title}\n            data-sortable={sort?\"\":undefined}\n            aria-colindex={j+1}\n            aria-sort={sortColumnIndex!==j?\"none\":SortDirections[sortDirectionSign]}\n        >\n            {label}\n        </th>\n    ));\n};\n\nexport default memo( HeaderCells );","import React, { useCallback, memo } from \"react\";\nimport HeaderCells from \"./HeaderCells\";\nimport useApi from \"../../useApi\";\n\nconst SUBSCRIBE_EVENTS = [];\n\nconst Thead = ({ trRef, getCellStyle, ...props }) => {\n\n    const API = useApi( SUBSCRIBE_EVENTS );\n\n    const clickHandler = useCallback( e => {\n\n        const colIndex = parseInt( e.target.getAttribute( \"aria-colindex\" ), 10 ) - 1;\n\n        if( process.env.NODE_ENV !== \"production\" && Number.isNaN( colIndex ) ){\n            throw new Error( \"colIndex attr missing\" );\n        }\n\n        if( API.columns[ colIndex ].sort ){\n            const directionSign = e.target.getAttribute( \"aria-sort\" ) === \"ascending\" ? -1 : 1;\n            API.setSortParams( colIndex, directionSign );\n        }\n    }, []);\n\n    return (\n        <thead {...props} onClick={clickHandler}>\n            <tr ref={trRef}>\n                <HeaderCells />\n            </tr>\n        </thead>\n    );\n};\n\nexport default memo( Thead );","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useApi from \"../../useApi\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#columns\",\n    \"#totals\",\n    \"totals-calculated\"\n];\n\nconst FooterCells = ({ TotalsCellComponent }) => {\n\n    const { columns, totals, totalsCache } = useApi( SUBSCRIBE_EVENTS );\n\n    return columns.map(({ dataKey, formatTotal, visibility }, j ) => {\n\n        if( visibility === \"hidden\" ){\n            return null;\n        }\n\n        const curTotals = totals[ dataKey ];\n        const curTotalsCache = totalsCache[ dataKey ];\n\n        return (\n            <td key={dataKey} aria-colindex={j+1}>\n                <TotalsCellComponent\n                    cellTotals={curTotals}\n                    totalsCache={curTotalsCache}\n                    formatTotal={formatTotal}\n                />\n            </td>\n        );\n    });\n};\n\nFooterCells.propTypes = {\n    TotalsCellComponent: PropTypes.elementType.isRequired\n}\n\nexport default memo( FooterCells );","import React, { memo } from \"react\";\nimport FooterCells from \"./FooterCells\";\n\nconst Tfoot = ({ className, trRef, TotalsCellComponent }) => (\n    <tfoot className={className}>\n        <tr ref={trRef}>\n            <FooterCells TotalsCellComponent={TotalsCellComponent} />\n        </tr>\n    </tfoot>\n);\n\nexport default memo( Tfoot );","import React, { useEffect } from \"react\";\nimport useApi from \"../../useApi\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#startIndex\",\n    \"#endIndex\",\n    \"#columns\",\n    \"#rowsOrder\",\n    \"#rowKeyGetter\",\n    \"#rowDataGetter\"\n];\n\nconst getVisibleRows = (\n    orderedRows,\n    rangeFrom,\n    rangeTo,\n    columns,\n    getRowData,\n    getRowKey,\n    getRowExtraProps,\n    getCellExtraProps,\n    RowComponent,\n    CellComponent\n) => {\n    const result = [];\n    for( let rowKey, idx; rangeFrom < rangeTo; rangeFrom++ ){\n        idx = orderedRows[ rangeFrom ];\n        rowKey = getRowKey ? getRowKey( idx ) : idx;\n        result.push(\n            <RowComponent\n                getRowExtraProps={getRowExtraProps}\n                getCellExtraProps={getCellExtraProps}\n                rowIndex={rangeFrom}\n                rowDataIndex={idx}\n                key={rowKey}\n                columns={columns}\n                getRowData={getRowData}\n                CellComponent={CellComponent}\n            />\n        );\n    }\n    return result;\n};\n\nconst Rows = ({ getRowExtraProps, getCellExtraProps, RowComponent, CellComponent }) => {\n\n    const API = useApi( SUBSCRIBE_EVENTS );\n\n    useEffect(() => {\n        API.emit( \"rows-rendered\" );\n    });\n\n    return getVisibleRows(\n        API.orderedRows,\n        API.startIndex,\n        API.endIndex,\n        API.columns,\n        API.rowDataGetter,\n        API.rowKeyGetter,\n        getRowExtraProps,\n        getCellExtraProps,\n        RowComponent,\n        CellComponent\n    );\n};\n\nexport default Rows;","import React, { memo } from \"react\";\nimport Rows from \"./Rows\";\n\nconst Tbody = ({\n    getRowExtraProps,\n    getCellExtraProps,\n    tbodyRef,\n    RowComponent,\n    CellComponent\n}) => (\n    <tbody ref={tbodyRef}>\n        <Rows\n            getRowExtraProps={getRowExtraProps}\n            getCellExtraProps={getCellExtraProps}\n            RowComponent={RowComponent}\n            CellComponent={CellComponent}\n        />\n    </tbody>\n);\n\nexport default memo( Tbody );","import React from \"react\";\nimport useApi from \"../../useApi\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#totalRows\",\n    \"#columns\"\n];\n\nconst BodyTable = ({ children }) => {\n\n    const API = useApi( SUBSCRIBE_EVENTS );\n\n    return (\n        <table\n            children={children}\n            className=\"afvscr-main-table\"\n            aria-rowcount={API.totalRows}\n            aria-colcount={API.columns.length}\n        />\n    );\n};\n\nexport default BodyTable;","import { useRef, useEffect, useCallback } from \"react\";\n\nconst useColWidthsResizeObserver = API => {\n\n    const observerRef = useRef();\n    const mutationObserverRef = useRef();\n\n    let RO = observerRef.current;\n    let MO = mutationObserverRef.current;\n\n    if( !RO ){\n        RO = observerRef.current = new ResizeObserver( entries => {\n            for( let j = 0, colIndex; j < entries.length; j++ ){\n                const { target } = entries[ j ];\n                colIndex = parseInt( target.getAttribute( \"aria-colindex\" ) );\n\n                /*\n                    using target.offsetWidth instead of contentRect.width, because we need border-box sizing, \n                    and { box: border-box } option does not work here\n                */\n                API.tbodyColumnWidths[ colIndex - 1 ] = Math.round( target.offsetWidth );\n            }\n            API.emit( \"tbody-column-widths-changed\" );\n        });\n\n        MO = mutationObserverRef.current = new MutationObserver( entries => {\n            for( let i = 0; i < entries.length; i++ ){\n                const { addedNodes, removedNodes } = entries[ i ];\n                for( let j = 0; j < addedNodes.length; j++ ){\n                    RO.observe( addedNodes[ j ] );\n                }\n                for( let j = 0; j < removedNodes.length; j++ ){\n                    RO.unobserve( removedNodes[ j ] );\n                }\n            }   \n        });\n    }\n\n    useEffect(() => () => {\n        RO.disconnect();\n        MO.disconnect();\n    }, []);\n\n    /* callback ref */\n    return useCallback( trNode => {\n        MO.disconnect();\n        RO.disconnect();\n        if( trNode ){\n            MO.observe( trNode, { childList: true });\n        }\n    }, []);\n};\n\nexport default useColWidthsResizeObserver;","import React, { memo } from \"react\";\nimport useApiPlugin from \"../useApi\";\n\nconst SUBSCRIBE_EVENTS = [ \"#virtualTopOffset\" ];\n\nconst Scroller = ({ Component }) => {\n\n    const { virtualTopOffset } = useApiPlugin( SUBSCRIBE_EVENTS );\n    /*\n        Hmm, I can't put here more than ~ 3 000 000. Maybe need to put one more row in case this height is > 3 000 000\n    */\n    return <Component className=\"afvscr-scroller\" aria-hidden=\"true\" style={{ height: virtualTopOffset }} />;\n};\n\nexport default memo( Scroller );","import React from \"react\";\nimport Scroller from \"../../common/Scroller\";\n\n/*\n    According to specs, tr must always be inside tbody, thead or tfoot                \n*/\nconst TbodyScroller = () => (\n    <tbody className=\"afvscr-scroller\" aria-hidden=\"true\">\n        <Scroller Component=\"tr\" />\n    </tbody>\n);\n\nexport default TbodyScroller;","import React, { cloneElement, memo } from \"react\";\nimport useApi from \"../useApi\";\n\nconst SUBSCRIBE_EVENTS = [ \"#widgetScrollHeight\" ];\n\nconst el = <div aria-hidden=\"true\" className=\"afvscr-height-provider\" />;\n\nconst HeightProvider = () => {\n\n    const { widgetScrollHeight: height } = useApi( SUBSCRIBE_EVENTS );\n\n    const props = {\n        style: {\n            height\n        }\n    };\n\n    return cloneElement( el, props );\n};\n\nexport default memo( HeightProvider );","import React, { forwardRef, useCallback, useEffect } from \"react\";\nimport cx from \"../utils/cx\";\nimport HeightProvider from \"./HeightProvider\";\nimport useApi from \"../useApi\";\n\nconst SUBSCRIBE_EVENTS = [];\n\nconst ScrollContainer = forwardRef(({\n    className,\n    children,\n    onScroll,\n    reportScrollLeft,\n    ...props\n}, ref ) => {\n\n    const API = useApi( SUBSCRIBE_EVENTS );\n\n    const scrollHandler = useCallback( e => {\n        const { scrollTop, scrollLeft } = e.target;\n        API.set( \"scrollTop\", scrollTop );\n        if( reportScrollLeft ){\n            API.set( \"scrollLeft\", scrollLeft );\n        }\n        if( onScroll ){\n            onScroll( e );\n        }\n    }, [ onScroll, reportScrollLeft ]);\n\n    useEffect(() => {\n        const el = ref.current;\n\n        const R = new ResizeObserver( entries => {\n            if( entries.length === 1 ){\n                /*\n                    using target.offsetWidth instead of contentRect.width, because we need border-box sizing, \n                    and { box: border-box } option does not work here\n                */\n                const { offsetWidth, offsetHeight } = entries[ 0 ].target;\n\n                API\n                    .set( \"widgetHeight\", Math.round( offsetHeight ) )\n                    .set( \"widgetWidth\", Math.round( offsetWidth ) );\n            }\n        });\n\n        R.observe( el );\n\n        return () => {\n            R.unobserve( el );\n        };\n    }, []);\n    \n    /*\n        tabIndex=\"0\" is for proper keyboard nav\n        https://bugzilla.mozilla.org/show_bug.cgi?id=1346159\n    */\n    return (\n        <div tabIndex=\"0\" className={cx(\"afvscr-scroll-container\",className)} ref={ref} onScroll={scrollHandler} {...props}>\n            <HeightProvider />\n            {children}\n        </div>\n    );\n});\n\nexport default ScrollContainer;","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useApi from \"../../useApi\";\nimport TableWrapper from \"./TableWrapper\";\n\nimport Thead from \"../common/Thead\";\nimport Tfoot from \"../common/Tfoot\";\nimport Tbody from \"../common/Tbody\";\nimport BodyTable from \"../common/BodyTable\";\n\nimport useColWidthsResizeObserver from \"./useColWidthsResizeObserver\";\nimport Colgroup from \"../common/Colgroup\";\nimport TbodyScroller from \"../common/TbodyScroller\";\nimport ScrollContainer from \"../../common/ScrollContainer\";\nimport cx from \"../../utils/cx\";\n\nconst subscribeEvents = [\n    \"#headlessMode\",\n    \"#totals\"\n];\n\nconst NonSticky = ({\n    className,\n    tbodyRef,\n    scrollContainerRef,\n    getRowExtraProps,\n    getCellExtraProps,\n    RowComponent,\n    CellComponent,\n    TotalsCellComponent,\n    onScroll,\n    ...props\n}) => {\n\n    const API = useApi( subscribeEvents );\n\n    const { headlessMode, totals } = API;\n\n    /*\n        Hidden tfoot & thead are needed to 'hold' widths of tbody columns no to be narrower than real thead/tfoot\n        and notify model about columns width changes.\n        There are 3 tables rendered in this mode, so their column widths need to be synced somehow.\n    */\n    const widthsObserverRef = useColWidthsResizeObserver( API );\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        if( headlessMode && !totals ){\n            console.warn( \"NonSticky table is rendered without headers and footers. This is not ok.\" )\n        }\n    }\n\n    return (\n        <div className={cx(\"afvscr-nonst\",className)} {...props}>\n            {headlessMode ? null : (\n                <TableWrapper>\n                    <Thead />\n                </TableWrapper>\n            )}\n            <ScrollContainer ref={scrollContainerRef} onScroll={onScroll} reportScrollLeft>\n                <BodyTable>\n                    <Colgroup />\n                    {headlessMode ? null : (\n                        <Thead\n                            className=\"afvscr-hdnwrp\"\n                            trRef={widthsObserverRef}\n                        />\n                    )}\n                    {totals && (\n                        <Tfoot\n                            TotalsCellComponent={TotalsCellComponent}\n                            className=\"afvscr-hdnwrp\"\n                            trRef={headlessMode?widthsObserverRef:undefined}\n                        />\n                    )}\n                    <TbodyScroller />\n                    <Tbody\n                        tbodyRef={tbodyRef}\n                        getRowExtraProps={getRowExtraProps}\n                        getCellExtraProps={getCellExtraProps}\n                        RowComponent={RowComponent}\n                        CellComponent={CellComponent}\n                    />\n                </BodyTable>\n            </ScrollContainer>\n            {totals && (\n                <TableWrapper>\n                    <Tfoot TotalsCellComponent={TotalsCellComponent} />\n                </TableWrapper>\n            )}\n        </div>\n    );\n};\n\nexport default memo( NonSticky );","import React, { memo, useEffect } from \"react\";\nimport Colgroup from \"../common/Colgroup\";\nimport TbodyScroller from \"../common/TbodyScroller\";\nimport ScrollContainer from \"../../common/ScrollContainer\";\nimport Thead from \"../common/Thead\";\nimport Tbody from \"../common/Tbody\";\nimport Tfoot from \"../common/Tfoot\";\nimport BodyTable from \"../common/BodyTable\";\nimport useApi from \"../../useApi\";\nimport cx from \"../../utils/cx\";\n\nconst SUBSCRIBE_EVENTS = [\n    \"#headlessMode\",\n    \"#totals\"\n];\n\n\n/*\n    Todo:\n        measure thead & tfoot heights in order to properly calculate available space for rows\n*/\n\n\nconst Sticky = ({\n    tbodyRef,\n    scrollContainerRef,\n    getRowExtraProps,\n    getCellExtraProps,\n    RowComponent,\n    CellComponent,\n    TotalsCellComponent,\n    className,\n    ...props\n}) => {\n\n    const { headlessMode, totals } = useApi( SUBSCRIBE_EVENTS );\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        /*\n            https://bugs.chromium.org/p/chromium/issues/detail?id=702927\n        */\n\n        const areTotalsPresent = totals && totals.length !== 0;\n\n        useEffect(() => {\n            if( !headlessMode || areTotalsPresent ){\n                /* TODO: tests fail without this if */\n                if( scrollContainerRef.current ){\n                    const table = scrollContainerRef.current.querySelector( \"table\" );\n                    const tableStyle = getComputedStyle( table );\n    \n                    if( tableStyle.borderCollapse === \"collapse\" ){\n                        console.warn(\n                            \"You use sticky table version. Due to special border behavior when scrolling, use border-collpase: separate.%o\",\n                            \"https://bugs.chromium.org/p/chromium/issues/detail?id=702927\"\n                        );\n                    }\n                }\n            }\n        }, [ headlessMode, areTotalsPresent ]);\n    }\n    \n    return (\n        <ScrollContainer ref={scrollContainerRef} reportScrollLeft className={cx(\"afvscr-st\",className)} {...props}>\n            <BodyTable>\n                <Colgroup />\n                {headlessMode?null:<Thead />}\n                <TbodyScroller />\n                <Tbody\n                    tbodyRef={tbodyRef}\n                    getRowExtraProps={getRowExtraProps}\n                    getCellExtraProps={getCellExtraProps}\n                    RowComponent={RowComponent}\n                    CellComponent={CellComponent}\n                />\n                {totals && (\n                    <Tfoot TotalsCellComponent={TotalsCellComponent} />\n                )}\n            </BodyTable>\n        </ScrollContainer>\n    );\n}\n\nexport default memo( Sticky );","const commonDefaultProps = {\n    fixedSize: false,\n    rowCount: 0,\n    overscanRowsCount: 4,\n    estimatedRowHeight: 16\n};\n\nexport default commonDefaultProps;","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport isPositionStickySupported from \"../utils/isPositionStickySupported\";\nimport Context from \"../Context\";\nimport useStore from \"../utils/useStore\";\n\nimport FixedSizeTableStore from \"../models/FixedSizeTable\";\nimport VariableSizeTableStore from \"../models/VariableSizeTable\";\n\nimport RowComponentDefault from \"./common/Row\";\nimport CellComponentDefault from \"./common/Cell\";\nimport TotalsCellComponentDefault from \"./common/TotalsCell\";\n\nimport RowCountWarningContainerDefault from \"../common/RowCountWarningContainer\";\n\nimport NonStickyComponent from \"./NonSticky\";\nimport StickyComponent from \"./Sticky\";\n\nimport commonPropTypes from \"../commonPropTypes\";\nimport commonDefaultProps from \"../commonDefaultProps\";\nimport cx from \"../utils/cx\";\n\nconst Table = ({\n    fixedSize,\n    estimatedRowHeight,\n    columns,\n    totals,\n    getRowData,\n    getRowKey,\n    getRowExtraProps,\n    getCellExtraProps,\n    rowCount,\n    overscanRowsCount,\n    rowCountWarningsTable,\n    headless,\n    RowCountWarningContainer,\n    dataRef,\n    nonSticky,\n    className,\n    ...props\n}) => {\n\n    const [ Store, scrollContainerRef, tbodyRef ] = useStore( fixedSize ? FixedSizeTableStore : VariableSizeTableStore, dataRef, {\n        headlessMode: headless,\n        rowDataGetter: getRowData,\n        rowKeyGetter: getRowKey,\n        overscanRowsCount,\n        estimatedRowHeight,\n        totals,\n        columns,\n        totalRows: Math.max( rowCount, 0 )\n    });\n\n    /*\n        Only cells inside thead/tfoot can be sticky.\n        If thead/tfoot are hidden - we can easily render lighter StickyComponent to avoid extra wrappers\n    */\n    const ComponentVariant = ( headless && !totals ) || ( !nonSticky && isPositionStickySupported() ) ? StickyComponent : NonStickyComponent;\n\n    return (\n        <Context.Provider value={Store}>\n            { rowCount > 0 ? (\n                <ComponentVariant\n                    className={cx(\"afvscr-table-wrapper\",className)}\n                    scrollContainerRef={scrollContainerRef}\n                    getRowExtraProps={getRowExtraProps}\n                    getCellExtraProps={getCellExtraProps}\n                    tbodyRef={tbodyRef}\n                    {...props}\n                />\n            ) : rowCountWarningsTable ? (\n                <RowCountWarningContainer>\n                    {rowCountWarningsTable[rowCount]}\n                </RowCountWarningContainer>\n            ) : null }\n        </Context.Provider>\n    );\n}\n\nTable.propTypes = {\n    ...commonPropTypes,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            // unique key for column\n            dataKey: PropTypes.string.isRequired,\n\n            // for details see CellComponent implementation\n            getCellData: PropTypes.func,\n            getEmptyCellData: PropTypes.func,\n            format: PropTypes.func,\n            render: PropTypes.func,\n            formatTotal: PropTypes.func,\n\n            visibility: PropTypes.oneOf([ \"visible\", \"hidden\" ]),\n            sort: PropTypes.oneOf([ \"locale\", \"numeric\" ]),\n\n            // column props, affecting colgroup > col tags\n            background: PropTypes.string,\n            border: PropTypes.string,\n            width: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\n            CellComponent: PropTypes.elementType,\n            getCellExtraProps: PropTypes.func\n        })\n    ).isRequired,\n\n    getCellExtraProps: PropTypes.func,\n\n    totals: PropTypes.objectOf(\n        // array may contain: \"sum\", \"average\", \"count\", \"max\", \"min\"\n        PropTypes.array\n    ),\n    \n    nonSticky: PropTypes.bool,\n    headless: PropTypes.bool,\n\n    HeaderRowComponent: PropTypes.elementType,\n    CellComponent: PropTypes.elementType,\n    TotalsCellComponent: PropTypes.elementType,\n\n    RowCountWarningContainer: PropTypes.elementType,\n    rowCountWarningsTable: PropTypes.object\n};\n\nTable.defaultProps = {\n    ...commonDefaultProps,\n    headless: false,\n\n    //    For 90% non-reactive solutions, which only provide new getRowData when data is changed, memo is ok.\n    //    If RowComponent should be wrapped my mobx observer - non-memo version should be imported.\n    //    memo(observer(RowComponentDefault)) will do the trick.\n    \n    RowComponent: memo( RowComponentDefault ),\n    CellComponent: CellComponentDefault,\n    TotalsCellComponent: TotalsCellComponentDefault,\n    RowCountWarningContainer: RowCountWarningContainerDefault,\n};\n\nexport default memo( Table );","import React from \"react\";\nimport Table from \"af-virtual-scroll/src/Table\";\n\nconst columns = [\n    {\n        dataKey: \"a\",\n        label: \"a\"\n    },\n    {\n        dataKey: \"b\",\n        label: \"b\"\n    },\n    {\n        dataKey: \"c\",\n        label: \"c\"\n    }\n];\n\nconst getRowData = index => ({\n    a: index,\n    b: `cell_b_row: ${index}`,\n    c: `cell_c_row: ${index}`\n})\n\nconst SimpleTable = ({ className }) => (\n    <Table\n        className={className}\n        getRowData={getRowData}\n        rowCount={500}\n        columns={columns}\n        estimatedRowHeight={200}\n    />\n);\n\nexport default SimpleTable;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var BasicEventEmitter = /*#__PURE__*/function () {\n  function BasicEventEmitter() {\n    this._T = Object.create(null);\n  }\n\n  var _proto = BasicEventEmitter.prototype;\n\n  _proto._a = function _a(eventName, fn, prepend) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!eventName || !fn) {\n        console.log(eventName, fn);\n        throw new Error(\"Wrong eventName/fn provided\");\n      }\n    }\n\n    var eventsQueue = this._T[eventName] || (this._T[eventName] = []);\n    eventsQueue[prepend ? \"unshift\" : \"push\"](fn);\n    return this;\n  };\n\n  _proto.on = function on(eventName, fn) {\n    return this._a(eventName, fn, false);\n  };\n\n  _proto.prependListener = function prependListener(eventName, fn) {\n    return this._a(eventName, fn, true);\n  };\n\n  _proto.off = function off(eventName, fn) {\n    var eventsQueue = this._T[eventName];\n\n    if (eventsQueue) {\n      var idx = eventsQueue.indexOf(fn);\n\n      if (idx !== -1) {\n        eventsQueue.splice(idx, 1);\n      }\n    }\n\n    return this;\n  };\n\n  _proto.emit = function emit(eventName) {\n    var eventsQueue = this._T[eventName];\n\n    if (eventsQueue) {\n      for (var j = 0; j < eventsQueue.length; j++) {\n        eventsQueue[j].call(this);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventName) {\n    if (eventName) {\n      this._T[eventName] = [];\n    } else {\n      this._T = Object.create(null);\n    }\n\n    return this;\n  };\n\n  return BasicEventEmitter;\n}();\n\nexport default BasicEventEmitter;","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}