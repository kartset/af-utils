/*
     * some custom renderers rely on individual row elements so we need to turn wrapLines on
     * if renderer is provided and wrapLines is undefined
     */

/* 0-9 */

/* A */

/* A-Z */

/* WEBPACK VAR INJECTION */

/* Z */

/* a */

/* a-z */

/* eslint-env browser */

/* global window, self */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* istanbul ignore else - Clean leaks after Prism. */

/* istanbul ignore next */

/* z */

/*#__PURE__*/

/**
		 * Insert a token before another token in a language literal
		 * As this needs to recreate the object (we cannot actually insert before keys in object literals),
		 * we cannot just provide an object, we need an object and a key.
		 * @param inside The key (or language id) of the parent
		 * @param before The key to insert before.
		 * @param insert Object with the key/value pairs to insert
		 * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
		 */

/**
     * Adds an inlined language to markup.
     *
     * An example of an inlined language is CSS with `<style>` tags.
     *
     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
     * case insensitive.
     * @param {string} lang The language key.
     * @example
     * addInlined('style', 'css');
     */

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

/***/

//  '.'

//  ';'

// @flow

// ASCII digits.

// ASCII hex digits.

// Accept `boolean` and `string`.

// Accept `object` on style.

// All non-terminated numeric entities are not rendered, and trigger a

// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)

// Allow for two levels of nesting

// An ampersand followed by anything unknown, and not terminated, is

// An empty (possible) entity is valid, unless it’s numeric (thus an

// And merge text with adjacent text

// Attribute or property.

// CONCATENATED MODULE: ./node_modules/react-syntax-highlighter/dist/esm/create-element.js

// CONCATENATED MODULE: ./node_modules/react-syntax-highlighter/dist/esm/highlight.js

// Cache the current point.

// Check if `character` is disallowed.

// Check if `character` is outside the permissible unicode range.

// Check if the given character code, or the character code at the first

// Check if we can match a legacy named reference.

// Class-names (which can be added both on the `selector` and here).

// Closing tag

// Compile an array to comma-separated tokens.

// Construct.

// Converted automatically using ./tools/themeFromVsCode

// Copy of the full string this token was created from

// Create a hast element from a simple CSS selector.

// Create.

// Deep clone a language definition (e.g. to extend it)

// Do not duplicate registrations.

// Do not insert token which also occur in insert. See #1525

// Does nothing when `queue` is empty.

// Don’t cache length as it changes during the loop

// EXTERNAL MODULE: ./node_modules/react-syntax-highlighter/node_modules/@babel/runtime/helpers/objectWithoutProperties.js

// EXTERNAL MODULE: ./node_modules/refractor/core.js

// Ensure the algorithm walks over the first character and the end (inclusive).

// Ensure the last empty entry is seen.

// Expose.

// Find language

// First eat the queued characters as normal text, then eat an entity.

// Flush `queue` (normal text).

// Found it!

// Get current position.

// Handle anything other than an ampersand, including newlines and EOF.

// Handle list values.

// Here we are inside a tag, and not inside a JSX context.

// Here we might have entered a JSX context inside a tag

// Here we might have left a JSX context inside a tag

// Hyperscript compatible DSL for creating virtual hast trees.

// If so, we cache that as the last viable named reference.

// If strarr[i] is a Token, then the match starts inside another Token, which is invalid

// If the decoded string is equal to the input, the entity was not valid

// If the previous character was a newline.

// If the reference is not terminated, warn.

// If theres something after an entity name which is not known, cap

// If we could not find a reference, queue the checked characters (as

// Ignore nully and NaN values.

// In worker

// Inherit.

// Legacy.

// Lists. Use CSS to reduce space between items instead

// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.

// Macro invoked before each entity and at the end of `value`.

// Move the index i to the element in strarr that is closest to from

// Named entity.

// No characters are consumed, and nothing is returned.

// Non-standard Properties.

// Not a character reference.

// Number of tokens to delete and replace with the new match

// Numerical entity.

// Opening tag

// Parse a (list of) primitives.

// Parse a single primitives.

// Parse comma-separated tokens to an array.

// Parse entities.

// Parse the number.

// Plugin to make entity title show the real entity, idea by Roman Komarov

// Pop matching opening tag

// Private helper vars

// Register bundled grammars.

// Return the reduced nodes, and any possible warnings.

// See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis

// Set language on the element, if not present

// Set language on the parent, for styling

// Several table elements. When `align=char`, sets the character to align on

// Several table elements. When `char`, offsets the alignment

// Several. Use CSS `text-align` instead,

// Several. Use CSS `vertical-align` instead

// Some entities do not require the closing semicolon (`&not` - for instance),

// Something went terribly wrong, ABORT, ABORT!

// Standard Properties.

// Stringify the number.

// That's plain text: drop any tokens matched.

// The behaviour depends on the identity of the next character.

// The behaviour further depends on the next character.

// The following will handle plain text inside tags

// The wrapped non-leaky grammars are loaded instead of Prism’s originals.

// This ensures we do not need to walk backwards later.

// This is not an error, either.

// This is possible because we can be certain neither newlines nor

// This must be declared before keyword because we use "function" inside the look-forward

// Traverse a language definition with Depth First Search

// Trigger a warning when the parsed number is disallowed, and replace

// Trigger a warning when the parsed number is prohibited, and replace

// Trigger a warning when the parsed number should not be used.

// Update references in other language definitions

// Warning types.

// We found a tag, now find its kind

// When terminated and number, parse as either hexadecimal or decimal.

// Without the global flag, lastIndex won't work

// Wrap `handleWarning`.

// Wrap to ensure clean parameters are given to `parse`.

// `<applet>`

// `<area>`. Use no href instead of an explicit `nohref`

// `<body>`

// `<body>` and table elements. Use CSS `background-color` instead

// `<body>`. Use CSS `a:active {color}` instead

// `<body>`. Use CSS `a:link {color: *}` instead

// `<body>`. Use CSS `a:visited {color}` instead

// `<body>`. Use CSS `background-image` instead

// `<body>`. Use CSS `color` instead

// `<br>`. Use CSS `clear` instead

// `<font>` and `<hr>`. Use CSS instead

// `<font>`. Use CSS instead

// `<frame>`

// `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`

// `<frame>`. Use overflow in the child context

// `<head>`

// `<hr>`. Use background-color and height instead of borders

// `<html>`. Use a doctype.

// `<iframe>`. Use CSS `border` instead

// `<img>` and `<object>`

// `<img>`. Use a `<picture>`

// `<isindex>`

// `<link>`

// `<meta>`

// `<object>`

// `<object>`. List of URIs to archives

// `<param>`

// `<script>`

// `<table>`

// `<table>`. Use CSS `border-color` instead,

// `<table>`. Use CSS `border-width` instead,

// `<td>` and `<th>`

// `<td>` and `<th>`. Use `scope` on `<th>`

// `name` is a grammar object.

// `options.padLeft` (default: `true`) pads a space left of each token, and

// `options.padRight` (default: `false`) pads a space to the right of each token.

// ampersand followed by an octothorp).

// ampersands are included.

// assume that the matching was incomplete

// by an alternative.

// character, is alphabetical.

// character, is alphanumerical.

// character, is decimal.

// character, is hexadecimal.

// eslint-disable-next-line complexity

// eslint-disable-next-line max-depth

// hack for components to work correctly in node.js

// invalid.

// istanbul ignore next - Don't allow Prism to run on page load in browser or

// normal characters), and move the pointer to their end.

// parsing and the entity to decode was not a semicolon (`&semi;`), we can

// result in the string `¬it;`.  When we encounter a trailing semicolon after

// the reference.

// to start messaging from workers.

// warning.

// which leads to situations where parsing the assumed entity of &notit; will

// with replacement character.

// “Throw” a parse-error: a warning.

//Get current script and highlight
