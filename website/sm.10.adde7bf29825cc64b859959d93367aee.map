{"version":3,"sources":["webpack:///./websiteSrc/examples/list/withFeatures.js","webpack:///./node_modules/lodash/groupBy.js","webpack:///./node_modules/lodash/_isIterateeCall.js","webpack:///./node_modules/lodash/random.js","webpack:///./node_modules/lodash/_baseRandom.js"],"names":["wrapperCss","heights","times","r","getRowData","index","style","lineHeight","borderTop","background","ListWithScrollToRowButton","className","dataRef","useRef","css","onSubmit","e","preventDefault","v","currentTarget","elements","scrollRow","value","current","scrollToRow","name","type","defaultValue","rowCount","baseAssignValue","createAggregator","hasOwnProperty","Object","prototype","groupBy","result","key","call","push","module","exports","eq","isArrayLike","isIndex","isObject","object","length","baseRandom","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","Math","min","nativeRandom","random","lower","upper","floating","undefined","temp","rand","nativeFloor","floor"],"mappings":";wIAMA,IAAMA,EAAa,CAAH,2FAOVC,EAAUC,IAFC,KAEgB,kBAAMC,IAAG,GAAI,QAExCC,EAAa,SAAAC,GAAK,OACpB,mBAAKC,MAAO,CACRC,WAAeN,EAAQI,GAAb,KACVG,UAAW,iBACXC,WAAY,OAAON,IAAE,EAAE,KAAb,IAAqBA,IAAE,GAAG,IAA1B,KAAkCA,IAAE,GAAG,IAAvC,OAHd,MAKQE,EALR,KAKsBJ,EAAQI,GAL9B,OA2CWK,UAlCmB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,UAE3BC,EAAUC,mBAQhB,OACI,mBAAKC,IAAKd,EAAYW,UAAWA,GAC7B,oBAAMI,SARQ,SAAAC,GAClBA,EAAEC,iBACF,IAAMC,EAAIF,EAAEG,cAAcC,SAASC,UAAUC,MAC7CV,EAAQW,QAAQC,aAAcN,KAMtB,iCAEI,qBACIO,KAAK,YACLC,KAAK,SACLC,aAAa,OAGrB,sBAAQD,KAAK,UAAb,WAIJ,YAAC,IAAD,CACId,QAASA,EACTR,WAAYA,EACZwB,SA1CC,S,mBCXjB,IAAIC,EAAkB,EAAQ,IAC1BC,EAAmB,EAAQ,KAM3BC,EAHcC,OAAOC,UAGQF,eAyB7BG,EAAUJ,GAAiB,SAASK,EAAQb,EAAOc,GACjDL,EAAeM,KAAKF,EAAQC,GAC9BD,EAAOC,GAAKE,KAAKhB,GAEjBO,EAAgBM,EAAQC,EAAK,CAACd,OAIlCiB,EAAOC,QAAUN,G,mBCxCjB,IAAIO,EAAK,EAAQ,IACbC,EAAc,EAAQ,IACtBC,EAAU,EAAQ,IAClBC,EAAW,EAAQ,IA0BvBL,EAAOC,QAdP,SAAwBlB,EAAOjB,EAAOwC,GACpC,IAAKD,EAASC,GACZ,OAAO,EAET,IAAInB,SAAcrB,EAClB,SAAY,UAARqB,EACKgB,EAAYG,IAAWF,EAAQtC,EAAOwC,EAAOC,QACrC,UAARpB,GAAoBrB,KAASwC,IAE7BJ,EAAGI,EAAOxC,GAAQiB,K,mBCxB7B,IAAIyB,EAAa,EAAQ,IACrBC,EAAiB,EAAQ,IACzBC,EAAW,EAAQ,IAGnBC,EAAiBC,WAGjBC,EAAYC,KAAKC,IACjBC,EAAeF,KAAKG,OAwExBjB,EAAOC,QAvCP,SAAgBiB,EAAOC,EAAOC,GA2B5B,GA1BIA,GAA+B,kBAAZA,GAAyBX,EAAeS,EAAOC,EAAOC,KAC3ED,EAAQC,OAAWC,QAEJA,IAAbD,IACkB,kBAATD,GACTC,EAAWD,EACXA,OAAQE,GAEe,kBAATH,IACdE,EAAWF,EACXA,OAAQG,SAGEA,IAAVH,QAAiCG,IAAVF,GACzBD,EAAQ,EACRC,EAAQ,IAGRD,EAAQR,EAASQ,QACHG,IAAVF,GACFA,EAAQD,EACRA,EAAQ,GAERC,EAAQT,EAASS,IAGjBD,EAAQC,EAAO,CACjB,IAAIG,EAAOJ,EACXA,EAAQC,EACRA,EAAQG,EAEV,GAAIF,GAAYF,EAAQ,GAAKC,EAAQ,EAAG,CACtC,IAAII,EAAOP,IACX,OAAOH,EAAUK,EAASK,GAAQJ,EAAQD,EAAQP,EAAe,QAAUY,EAAO,IAAIhB,OAAS,KAAOY,GAExG,OAAOX,EAAWU,EAAOC,K,iBC7E3B,IAAIK,EAAcV,KAAKW,MACnBT,EAAeF,KAAKG,OAexBjB,EAAOC,QAJP,SAAoBiB,EAAOC,GACzB,OAAOD,EAAQM,EAAYR,KAAkBG,EAAQD,EAAQ","file":"10.04add87309f41625e48f.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport List from \"af-virtual-scroll/lib/List\";\r\nimport r from \"lodash/random\";\r\nimport times from \"lodash/times\";\r\nimport { css } from \"@emotion/core\";\r\n\r\nconst wrapperCss = css`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n`;\r\n\r\nconst rowCount = 100000;\r\n\r\nconst heights = times( rowCount, () => r( 50, 250 ) );\r\n\r\nconst getRowData = index => (\r\n    <div style={{\r\n        lineHeight: `${heights[index]}px`,\r\n        borderTop: \"1px solid #666\",\r\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\r\n    }}>\r\n        row{index}:&nbsp;{heights[index]}px\r\n    </div>\r\n);\r\n\r\nconst ListWithScrollToRowButton = ({ className }) => {\r\n\r\n    const dataRef = useRef();\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        const v = e.currentTarget.elements.scrollRow.value;\r\n        dataRef.current.scrollToRow( +v );\r\n    };\r\n\r\n    return (\r\n        <div css={wrapperCss} className={className}>\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    Row:&nbsp;\r\n                    <input\r\n                        name=\"scrollRow\"\r\n                        type=\"number\"\r\n                        defaultValue=\"0\"\r\n                    />\r\n                </label>\r\n                <button type=\"submit\">\r\n                    Scroll\r\n                </button>\r\n            </form>\r\n            <List\r\n                dataRef={dataRef}\r\n                getRowData={getRowData}\r\n                rowCount={rowCount}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListWithScrollToRowButton;","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n"],"sourceRoot":""}