/*! For license information please see 6.da2074c9015f1d2ed4c5.js.LICENSE.txt */
(window.Z=window.Z||[]).push([[6],{108:function(r,n,e){"use strict";e.d(n,"a",(function(){return i})),e.d(n,"b",(function(){return m}));var t=e(143),a=e.n(t),o=e(0),l=e(172),s=e(185),c=s.keys().reduce((function(r,n){return a()(r,n.slice(2,-3).split("/"),n.slice(2,-3))}),{}),i=s.keys().reduce((function(r,n){return r[n.slice(2,-3)]=[Object(o.lazy)((function(){return s(n)})),l(n).default,n.slice(2,-3)],r}),{}),m=function r(n,e){var t,a,o=function(o){"object"==typeof(t=n[o])?((a=e.find((function(r){return r.name===o})))||(a={name:o,children:[]},e.push(a)),r(t,a.children)):e.push({name:o,path:"/examples/"+t})};for(var l in n)o(l);return e}(c,[])},172:function(r,n,e){var t={"./list/simple.js":173,"./list/withFeatures.js":174,"./table/formatCells.js":175,"./table/headless.js":176,"./table/nonSticky.js":177,"./table/observableCells.js":178,"./table/scrollToRow.js":179,"./table/simple.js":180,"./table/sortable.js":181,"./table/styledColumns.js":182,"./table/totals.js":183,"./table/variableRowHeights.js":184};function a(r){var n=o(r);return e(n)}function o(r){if(!e.o(t,r)){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}return t[r]}a.keys=function(){return Object.keys(t)},a.resolve=o,r.exports=a,a.id=172},173:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport List from "af-virtual-scroll/lib/List";\r\n\r\nconst getRowData = index => `row ${index}`;\r\n\r\nconst SimpleList = ({ className }) => (\r\n    <List\r\n        fixedSize\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={500000}\r\n    />\r\n);\r\n\r\nexport default SimpleList;'},174:function(r,n,e){"use strict";e.r(n),n.default='import React, { useRef } from "react";\r\nimport List from "af-virtual-scroll/lib/List";\r\nimport r from "lodash/random";\r\nimport times from "lodash/times";\r\nimport { css } from "@emotion/core";\r\n\r\nconst wrapperCss = css`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n`;\r\n\r\nconst rowCount = 100000;\r\n\r\nconst heights = times( rowCount, () => r( 50, 250 ) );\r\n\r\nconst getRowData = index => (\r\n    <div style={{\r\n        lineHeight: `${heights[index]}px`,\r\n        borderTop: "1px solid #666",\r\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\r\n    }}>\r\n        row{index}:&nbsp;{heights[index]}px\r\n    </div>\r\n);\r\n\r\nconst ListWithScrollToRowButton = ({ className }) => {\r\n\r\n    const dataRef = useRef();\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        const v = e.currentTarget.elements.scrollRow.value;\r\n        dataRef.current.scrollToRow( +v );\r\n    };\r\n\r\n    return (\r\n        <div css={wrapperCss} className={className}>\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    Row:&nbsp;\r\n                    <input\r\n                        name="scrollRow"\r\n                        type="number"\r\n                        defaultValue="0"\r\n                    />\r\n                </label>\r\n                <button type="submit">\r\n                    Scroll\r\n                </button>\r\n            </form>\r\n            <List\r\n                dataRef={dataRef}\r\n                getRowData={getRowData}\r\n                rowCount={rowCount}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListWithScrollToRowButton;'},175:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport r from "lodash/random";\r\nimport times from "lodash/times";\r\nimport faker from "faker";\r\n\r\nconst DFMT = new Intl.DateTimeFormat();\r\nconst NFMT = new Intl.NumberFormat();\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "num",\r\n        label: "Numeric",\r\n        sort: "numeric",\r\n        format: cellData => NFMT.format( cellData ),\r\n    },\r\n    {\r\n        dataKey: "str",\r\n        label: "String",\r\n        sort: "locale"\r\n    },\r\n    {\r\n        dataKey: "timeStamp",\r\n        label: "Date",\r\n        format: cellData => DFMT.format( cellData ),\r\n        sort: "numeric"\r\n    }\r\n];\r\n\r\nconst rowCount = 5000;\r\n\r\nconst rows = times( rowCount, () => ({\r\n    num: r( 1, 20000 ) / 27,\r\n    str: faker.name.findName(),\r\n    timeStamp: r( 0, Date.now() )\r\n}));\r\n\r\nconst getRowData = index => rows[ index ];\r\n\r\nconst TableWithFormattedCell = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={rowCount}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default TableWithFormattedCell;'},176:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "a",\r\n        label: "a"\r\n    },\r\n    {\r\n        dataKey: "b",\r\n        label: "b"\r\n    },\r\n    {\r\n        dataKey: "c",\r\n        label: "c"\r\n    }\r\n];\r\n\r\nconst getRowData = index => ({\r\n    a: index,\r\n    b: `cell_b_row: ${index}`,\r\n    c: `cell_c_row: ${index}`\r\n})\r\n\r\nconst SimpleHeadlessTable = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        headless\r\n        getRowData={getRowData}\r\n        rowCount={500}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default SimpleHeadlessTable;'},177:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "a",\r\n        label: "a"\r\n    },\r\n    {\r\n        dataKey: "b",\r\n        label: "b"\r\n    },\r\n    {\r\n        dataKey: "c",\r\n        label: "c"\r\n    }\r\n];\r\n\r\nconst getRowData = index => ({\r\n    a: index,\r\n    b: `cell_b_row: ${index}`,\r\n    c: `cell_c_row: ${index}`\r\n})\r\n\r\nconst NonStickyTable = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        getRowData={getRowData}\r\n        nonSticky\r\n        rowCount={500}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default NonStickyTable;'},178:function(r,n,e){"use strict";e.r(n),n.default='import React, { memo, useEffect, useState, useCallback } from "react";\r\nimport { observable } from "mobx";\r\nimport { observer } from "mobx-react-lite";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport DefaultCellComponent from "af-virtual-scroll/lib/Table/common/Cell";\r\nimport r from "lodash/random";\r\nimport { css } from "@emotion/core";\r\n\r\nconst hueBlockCss = css`\r\n    padding: 0.5em;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst renderHue = cellData => (\r\n    <div\r\n        css={hueBlockCss}\r\n        style={{ background: `hsl(${cellData},90%,70%)` }}\r\n    >\r\n        hue:&nbsp;{cellData}\r\n    </div>\r\n)\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "n1",\r\n        label: "N1",\r\n        width: 100,\r\n        render: renderHue\r\n    },\r\n    {\r\n        dataKey: "n2",\r\n        label: "N2",\r\n        width: 100,\r\n        render: renderHue\r\n    },\r\n    {\r\n        dataKey: "n3",\r\n        label: "N3",\r\n        width: 100,\r\n        render: renderHue\r\n    }\r\n];\r\n\r\nconst rowCount = 200;\r\n\r\nconst CellComponent = memo(observer(DefaultCellComponent))\r\n\r\nconst TableWithObservableRows = ({ className }) => {\r\n\r\n    const [ rows ] = useState(() => {\r\n        const r = observable([]);\r\n\r\n        for( let j = 0; j < rowCount; j++ ){\r\n            r.push({ n1: 0, n2: 0, n3: 0 });\r\n        }\r\n\r\n        return r;\r\n    });\r\n\r\n    /* useCallback prevents table from unnecessary rerenders */\r\n    const getRowData = useCallback( index => rows[ index ], [ rows ]);\r\n\r\n    useEffect(() => {\r\n        const intervalHandle = setInterval(() => {\r\n            for( let j = 0; j < 50; j++ ){\r\n                rows[r(0,rowCount-1)][ `n${r(1,3)}` ] = r( 0, 360 );\r\n            }\r\n        }, 1000 );\r\n\r\n        return () => {\r\n            clearInterval( intervalHandle );\r\n        };\r\n    }, [ rows ]);\r\n\r\n    return (\r\n        <Table\r\n            className={className}\r\n            CellComponent={CellComponent}\r\n            getRowData={getRowData}\r\n            rowCount={rowCount}\r\n            columns={columns}\r\n        />\r\n    );\r\n};\r\n\r\nexport default TableWithObservableRows;'},179:function(r,n,e){"use strict";e.r(n),n.default='import React, { useRef } from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport { css } from "@emotion/core";\r\n\r\nconst wrapperCss = css`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n`;\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "a",\r\n        label: "a"\r\n    },\r\n    {\r\n        dataKey: "b",\r\n        label: "b"\r\n    },\r\n    {\r\n        dataKey: "c",\r\n        label: "c"\r\n    }\r\n];\r\n\r\nconst getRowData = index => ({\r\n    a: index,\r\n    b: `cell_b_row: ${index}`,\r\n    c: `cell_c_row: ${index}`\r\n})\r\n\r\nconst TableWithScrollToRowButton = ({ className }) => {\r\n\r\n    const dataRef = useRef();\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        const v = e.currentTarget.elements.scrollRow.value;\r\n        dataRef.current.scrollToRow( +v );\r\n    };\r\n\r\n    return (\r\n        <div css={wrapperCss} className={className}>\r\n            <form onSubmit={submitHandler}>\r\n                <label>\r\n                    Row:&nbsp;\r\n                    <input\r\n                        name="scrollRow"\r\n                        type="number"\r\n                        defaultValue="0"\r\n                    />\r\n                </label>\r\n                <button type="submit">\r\n                    Scroll\r\n                </button>\r\n            </form>\r\n            <Table\r\n                dataRef={dataRef}\r\n                getRowData={getRowData}\r\n                rowCount={50000}\r\n                columns={columns}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableWithScrollToRowButton;'},180:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "a",\r\n        label: "a"\r\n    },\r\n    {\r\n        dataKey: "b",\r\n        label: "b"\r\n    },\r\n    {\r\n        dataKey: "c",\r\n        label: "c"\r\n    }\r\n];\r\n\r\nconst getRowData = index => ({\r\n    a: index,\r\n    b: `cell_b_row: ${index}`,\r\n    c: `cell_c_row: ${index}`\r\n})\r\n\r\nconst SimpleTable = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={500}\r\n        columns={columns}\r\n        estimatedRowHeight={200}\r\n    />\r\n);\r\n\r\nexport default SimpleTable;'},181:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport r from "lodash/random";\r\nimport times from "lodash/times";\r\nimport faker from "faker";\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "num",\r\n        label: "Numeric",\r\n        sort: "numeric"\r\n    },\r\n    {\r\n        dataKey: "str",\r\n        label: "String",\r\n        sort: "locale"\r\n    }\r\n];\r\n\r\nconst rowCount = 5000;\r\n\r\nconst rows = times( rowCount, () => ({\r\n    num: r( 1, 20000 ),\r\n    str: faker.name.findName()\r\n}));\r\n\r\nconst getRowData = index => rows[ index ];\r\n\r\nconst SortableTable = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={rowCount}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default SortableTable;'},182:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport times from "lodash/times";\r\nimport range from "lodash/range";\r\nimport r from "lodash/random";\r\nimport { css } from "@emotion/core";\r\n\r\nconst wrapperCss = css`\r\n    table {\r\n        border-spacing: 0;\r\n    }\r\n    tr[data-odd]{\r\n        background: rgba(0,0,0,0.2)\r\n    }\r\n`;\r\n\r\nconst colCount = 5;\r\n\r\nconst getRowExtraProps = ( rowData, rowDataIndex ) => rowDataIndex % 2 ? { "data-odd": "" } : null;\r\n\r\nconst columns = times( colCount, colIndex => ({\r\n    dataKey: `col${colIndex}`,\r\n    label: `col${colIndex}`,\r\n    background: `hsl(${Math.floor(360/colCount*colIndex)},80%,80%)`,\r\n    width: r( 50, 300 )\r\n}));\r\n\r\nconst getRowData = index => range( colCount ).reduce(( acc, colIndex ) => {\r\n    acc[ `col${colIndex}` ] = index;\r\n    return acc;\r\n}, {});\r\n\r\nconst totals = range( colCount ).reduce(( acc, colIndex ) => {\r\n    acc[ `col${colIndex}` ] = [ "count" ];\r\n    return acc;\r\n}, {});\r\n\r\nconst TableWithStyledColumns = ({ className }) => (\r\n    <Table\r\n        getRowExtraProps={getRowExtraProps}\r\n        css={wrapperCss}\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={500}\r\n        totals={totals}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default TableWithStyledColumns;'},183:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport r from "lodash/random";\r\nimport times from "lodash/times";\r\n\r\nconst columns = [\r\n    { dataKey: "n1", label: "N1" },\r\n    { dataKey: "n2", label: "N2" },\r\n    { dataKey: "n3", label: "N3" },\r\n    { dataKey: "n4", label: "N4" },\r\n];\r\n\r\nconst rowCount = 5000;\r\n\r\nconst rows = times( rowCount, () => ({\r\n    n1: r( 1, 20000 ),\r\n    n2: r( 1, 20000 ),\r\n    n3: r( 1, 20000 ),\r\n    n4: r( 1, 20000 )\r\n}));\r\n\r\nconst totals = {\r\n    n1: [ "count" ],\r\n    n2: [ "sum", "max" ],\r\n    n3: [ "average", "min" ],\r\n    n4: [ "count", "sum", "average" ]\r\n};\r\n\r\nconst getRowData = index => rows[ index ];\r\n\r\nconst TableWithTotals = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        getRowData={getRowData}\r\n        rowCount={rowCount}\r\n        columns={columns}\r\n        totals={totals}\r\n    />\r\n);\r\n\r\nexport default TableWithTotals;'},184:function(r,n,e){"use strict";e.r(n),n.default='import React from "react";\r\nimport Table from "af-virtual-scroll/lib/Table";\r\nimport r from "lodash/random";\r\nimport times from "lodash/times";\r\nimport faker from "faker";\r\n\r\nconst columns = [\r\n    {\r\n        dataKey: "rowIndex",\r\n        label: "Row index",\r\n        getCellData: ( rowData, i ) => i\r\n    },\r\n    {\r\n        dataKey: "num",\r\n        label: "Numeric",\r\n        sort: "numeric"\r\n    },\r\n    {\r\n        dataKey: "str",\r\n        label: "String",\r\n        sort: "locale"\r\n    },\r\n    {\r\n        dataKey: "rect",\r\n        label: "Rectangle",\r\n        render: cellData => (\r\n            <div style={{\r\n                lineHeight: `${cellData}px`,\r\n                background: `hsl(${r(0,360)},50%,50%)`\r\n            }}>\r\n                height: {cellData}px\r\n            </div>\r\n        )\r\n    }\r\n];\r\n\r\nconst rowCount = 100000;\r\n\r\nconst rows = times( rowCount, () => ({\r\n    num: r( 1, 20000 ),\r\n    str: faker.name.findName(),\r\n    rect: r( 50, 250 )\r\n}));\r\n\r\nconst getRowData = index => rows[ index ];\r\n\r\nconst totals = {\r\n    num: [ "sum", "count" ]\r\n};\r\n\r\nconst VariableRowHeightsTable = ({ className }) => (\r\n    <Table\r\n        className={className}\r\n        totals={totals}\r\n        getRowData={getRowData}\r\n        estimatedRowHeight={300}\r\n        rowCount={rowCount}\r\n        columns={columns}\r\n    />\r\n);\r\n\r\nexport default VariableRowHeightsTable;'},185:function(r,n,e){var t={"./list/simple.js":[220,0,1,19],"./list/withFeatures.js":[273,0,1,10],"./table/formatCells.js":[274,0,3,1,2,11],"./table/headless.js":[1344,0,1,2,20],"./table/nonSticky.js":[1345,0,1,2,21],"./table/observableCells.js":[1346,0,1,2,12],"./table/scrollToRow.js":[1347,0,1,2,22],"./table/simple.js":[1348,0,1,2,23],"./table/sortable.js":[1349,0,3,1,2,13],"./table/styledColumns.js":[1350,0,1,2,9,24],"./table/totals.js":[1354,0,1,2,14],"./table/variableRowHeights.js":[1355,0,3,1,2,15]};function a(r){if(!e.o(t,r))return Promise.resolve().then((function(){var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}));var n=t[r],a=n[0];return Promise.all(n.slice(1).map(e.e)).then((function(){return e(a)}))}a.keys=function(){return Object.keys(t)},a.id=185,r.exports=a}}]);
//# sourceMappingURL=sm.6.2896d8d12a98e4e9231adbf239cdda47.map