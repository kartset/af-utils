{"version":3,"sources":["webpack:///./websiteSrc/examples/table/observableCells.js"],"names":["hueBlockCss","renderHue","cellData","css","style","background","columns","dataKey","label","width","render","CellComponent","memo","observer","DefaultCellComponent","TableWithObservableRows","className","rows","useState","r","observable","j","push","n1","n2","n3","getRowData","useCallback","index","useEffect","intervalHandle","setInterval","rowCount","clearInterval"],"mappings":";kJAQA,IAAMA,EAAc,CAAH,wFAKXC,EAAY,SAAAC,GAAQ,OACtB,mBACIC,IAAKH,EACLI,MAAO,CAAEC,WAAY,OAAOH,EAAT,cAFvB,QAIeA,IAIbI,EAAU,CACZ,CACIC,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,GAEZ,CACIM,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,GAEZ,CACIM,QAAS,KACTC,MAAO,KACPC,MAAO,IACPC,OAAQT,IAMVU,EAAgBC,eAAKC,YAASC,MAwCrBC,UAtCiB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,UAEvBC,EAASC,oBAAS,WAGtB,IAFA,IAAMC,EAAIC,qBAAW,IAEZC,EAAI,EAAGA,EATP,IASqBA,IAC1BF,EAAEG,KAAK,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,IAG/B,OAAON,KAToC,GAazCO,EAAaC,uBAAa,SAAAC,GAAK,OAAIX,EAAMW,KAAS,CAAEX,IAc1D,OAZAY,qBAAU,WACN,IAAMC,EAAiBC,aAAY,WAC/B,IAAK,IAAIV,EAAI,EAAGA,EAAI,GAAIA,IACpBJ,EAAKE,IAAE,EAAEa,MAAT,IAA2Bb,IAAE,EAAE,IAASA,IAAG,EAAG,OAEnD,KAEH,OAAO,WACHc,cAAeH,MAEpB,CAAEb,IAGD,YAAC,IAAD,CACID,UAAWA,EACXL,cAAeA,EACfe,WAAYA,EACZM,SApCK,IAqCL1B,QAASA","file":"23.9d15f37e9fa90757a4fc.js","sourcesContent":["import React, { memo, useEffect, useState, useCallback } from \"react\";\nimport { observable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport Table from \"af-virtual-scroll/lib/Table\";\nimport DefaultCellComponent from \"af-virtual-scroll/lib/Table/common/Cell\";\nimport r from \"lodash/random\";\nimport { css } from \"@emotion/core\";\n\nconst hueBlockCss = css`\n    padding: 0.5em;\n    border-radius: 5px;\n`;\n\nconst renderHue = cellData => (\n    <div\n        css={hueBlockCss}\n        style={{ background: `hsl(${cellData},90%,70%)` }}\n    >\n        hue:&nbsp;{cellData}\n    </div>\n)\n\nconst columns = [\n    {\n        dataKey: \"n1\",\n        label: \"N1\",\n        width: 100,\n        render: renderHue\n    },\n    {\n        dataKey: \"n2\",\n        label: \"N2\",\n        width: 100,\n        render: renderHue\n    },\n    {\n        dataKey: \"n3\",\n        label: \"N3\",\n        width: 100,\n        render: renderHue\n    }\n];\n\nconst rowCount = 200;\n\nconst CellComponent = memo(observer(DefaultCellComponent))\n\nconst TableWithObservableRows = ({ className }) => {\n\n    const [ rows ] = useState(() => {\n        const r = observable([]);\n\n        for( let j = 0; j < rowCount; j++ ){\n            r.push({ n1: 0, n2: 0, n3: 0 });\n        }\n\n        return r;\n    });\n\n    /* useCallback prevents table from unnecessary rerenders */\n    const getRowData = useCallback( index => rows[ index ], [ rows ]);\n\n    useEffect(() => {\n        const intervalHandle = setInterval(() => {\n            for( let j = 0; j < 50; j++ ){\n                rows[r(0,rowCount-1)][ `n${r(1,3)}` ] = r( 0, 360 );\n            }\n        }, 1000 );\n\n        return () => {\n            clearInterval( intervalHandle );\n        };\n    }, [ rows ]);\n\n    return (\n        <Table\n            className={className}\n            CellComponent={CellComponent}\n            getRowData={getRowData}\n            rowCount={rowCount}\n            columns={columns}\n        />\n    );\n};\n\nexport default TableWithObservableRows;"],"sourceRoot":""}