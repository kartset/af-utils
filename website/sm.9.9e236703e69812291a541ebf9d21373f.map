{"version":3,"sources":["webpack:///./websiteSrc/Docs/basic.js","webpack:///./websiteSrc/Docs/index.js","webpack:///./websiteSrc/Code/index.js"],"names":["codeCss","DocPages","basic","Code","css","data-required","href","target","wrapperCss","Docs","docpage","useParams","PageComponent","SyntaxHighlighter","registerLanguage","js","customStyle","borderRadius","margin","props","language","style","codeStyle"],"mappings":";4GAIA,IAAMA,EAAU,CAAH,oFCCb,IAAMC,EAAW,CACbC,MD8CU,kBACV,YAAC,WAAD,KACI,+BACA,YAACC,EAAA,EAAD,CAAMC,IAAKJ,GA9CA,ydA+CX,mDACA,sBACI,sBACI,kBAAIK,iBAAA,GAAJ,YACA,kEAIJ,sBACI,kBAAIA,iBAAA,GAAJ,wBACA,6JAIJ,sBACI,6CACA,0GAIJ,sBACI,yEACA,uRAOJ,sBACI,mCACA,8DAIJ,sBACI,mCACA,+TAII,iBAAGC,KAAK,uEAAuEC,OAAO,UAAtF,WAGR,sBACI,2CACA,sGAIJ,sBACI,4CACA,gQAOR,oCACA,sBACI,sCACA,qBACI,iBAAGD,KAAK,mFAAmFC,OAAO,UAAlG,4BAKR,qCACA,sBACI,sBACI,kBAAIF,iBAAA,GAAJ,WACA,mDAGA,YAACF,EAAA,EAAD,CAAMC,IAAKJ,GAvGP,2kBAyGR,sBACI,kCACA,2DAIJ,sBACI,gCACA,sIAGA,YAACG,EAAA,EAAD,CAAMC,IAAKJ,GAzHR,qEA2HP,sBACI,mCACA,0OAEsG,uBAClG,iBAAGM,KAAK,yGAAyGC,OAAO,UAAxH,yBAKR,sBACI,sCACA,qBACI,iBAAGD,KAAK,oFAAoFC,OAAO,UAAnG,4BAKR,sBACI,uCACA,qBACI,iBAAGD,KAAK,qFAAqFC,OAAO,UAApG,4BAKR,sBACI,6CACA,qBACI,iBAAGD,KAAK,2FAA2FC,OAAO,UAA1G,4BAKR,sBACI,2DACA,yHC7KVC,EAAa,CAAH,oJAuBDC,UAXF,WAAM,IACPC,EAAYC,cAAZD,QACFE,EAAgBF,GAAWT,EAAUS,GAE3C,OAAOE,EACH,mBAAKR,IAAKI,GACN,YAACI,EAAD,OAEJ,mB,mFCvBRC,IAAkBC,iBAAkB,aAAcC,KAElD,IAAMC,EAAc,CAChBC,aAAc,OACdC,OAAQ,GAGNlB,EAAU,CAAH,iEAcEG,IAVF,SAAAgB,GAAK,OACd,YAAC,IAAD,aACIf,IAAKJ,EACLoB,SAAS,aACTC,MAAOC,IACPN,YAAaA,GACTG","file":"9.b4b45cf71e9de78503d2.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport Code from \"../Code\";\r\n\r\nconst codeCss = css`\r\n    font-size: 0.8em;\r\n    display: inline-flex;\r\n`;\r\n\r\nconst importCode = `/* import style once in your project */\r\nimport \"af-virtual-scroll/lib/style.css\";\r\n\r\n/* import component( both named and default import syntax supported ) */\r\nimport { Table, List } from \"af-virtual-scroll\";\r\n\r\n/* OR */\r\nimport Table from \"af-virtual-scroll/lib/Table\";\r\nimport List from \"af-virtual-scroll/lib/List\";\r\n/* end import */\r\n\r\n/*Polyfill ResizeObserver and MutationObserver if needed.*/\r\nconst examplePolyfill = \"https://github.com/juggle/resize-observer\";`;\r\n\r\nconst totalsCode = `{\r\n    column1: [ \"sum\", \"max\" ],\r\n    column2: [ \"average\" ]\r\n}`;\r\n\r\nconst columnsCode = `{\r\n    // unique key for column\r\n    dataKey: string.isRequired,\r\n\r\n    // for details see CellComponent implementation\r\n    getCellData: func,\r\n    getEmptyCellData: func,\r\n    format: func,\r\n    render: func,\r\n    formatTotal: func,\r\n\r\n    visibility: oneOf([ \"visible\", \"hidden\" ]),\r\n    sort: oneOf([ \"locale\", \"numeric\" ]),\r\n\r\n    // column props, affecting colgroup > col tags\r\n    background: string,\r\n    border: string,\r\n    width: oneOfType([ number, string ]),\r\n\r\n    // These two override global props, if present\r\n    CellComponent: any,\r\n    getCellExtraProps: func\r\n}`;\r\n\r\nconst Basic = () => (\r\n    <Fragment>\r\n        <h3>Usage</h3>\r\n        <Code css={codeCss}>{importCode}</Code>\r\n        <h3>Common props (Table/List)</h3>\r\n        <ul>\r\n            <li>\r\n                <h4 data-required>rowCount</h4>\r\n                <p>\r\n                    Indicates number of rows for table/list.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4 data-required>getRowData(rowIndex)</h4>\r\n                <p>\r\n                    Returns row data object. If a reference to this method changes - table/list reloads data, so it should be wrapped with useCallback.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>getRowKey(rowIndex)</h4>\r\n                <p>\r\n                    By default rowIndex is used as row key. If you want to optimize this - go ahead.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>getRowExtraProps(rowData,rowIndex,rowDataIndex)</h4>\r\n                <p>\r\n                    Returns an object of extra props, that will be passed to row wrapper(usually tr for table and div for list).\r\n                    Hooks also can be called here.\r\n                    rowIndex afer sorting remains 1, 2, 3, etc.\r\n                    rowDataIndex refers initial data indexes ( can be 1, 10, 5, 3, etc. )\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>className</h4>\r\n                <p>\r\n                    Widget wrapper additional css class.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>fixedSize</h4>\r\n                <p>\r\n                    By default table/list assumes, that it's rows have different heights.\r\n                    If you are SURE, that all rows always will have same height(after collapsing widget width, etc.) - put this prop as true.\r\n                    This will optimize calculations. For details see difference between FixedSizeList and VariableSizeList&nbsp;\r\n                    <a href=\"https://github.com/nowaalex/af-virtual-scroll/tree/master/src/models\" target=\"_blank\">here.</a>\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>overscanRowsCount</h4>\r\n                <p>\r\n                    Determines, how many rows are drawn above and below table/list visible part.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>estimatedRowHeight</h4>\r\n                <p>\r\n                    Quantity of rows to render is roughly counted like this: availableHeight / rowHeight.\r\n                    So quantity of initially rendered rows can be tweaked. Further, when exact height/heights of rows would be known,\r\n                    this value would not be used.\r\n                </p>\r\n            </li>\r\n        </ul>\r\n        <h3>List props</h3>\r\n        <ul>\r\n            <li>RowComponent</li>\r\n            <p>\r\n                <a href=\"https://github.com/nowaalex/af-virtual-scroll/blob/master/src/List/common/Row.js\" target=\"_blank\">\r\n                    Default implementation\r\n                </a>\r\n            </p>\r\n        </ul>\r\n        <h3>Table props</h3>\r\n        <ul>\r\n            <li>\r\n                <h4 data-required>columns</h4>\r\n                <p>\r\n                    Array of objects of shape:\r\n                </p>\r\n                <Code css={codeCss}>{columnsCode}</Code>\r\n            </li>\r\n            <li>\r\n                <h4>headless</h4>\r\n                <p>\r\n                    Omits thead rendering if enabled.\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>totals</h4>\r\n                <p>\r\n                    Object, where keys are column dataKeys, and values are arrays of ( \"sum\", \"average\", \"count\", \"max\", \"min\" ).\r\n                </p>\r\n                <Code css={codeCss}>{totalsCode}</Code>\r\n            </li>\r\n            <li>\r\n                <h4>nonSticky</h4>\r\n                <p>\r\n                    Scrollable table body can be achieved either by position: sticky table cells or by rendering 3 separate tables.\r\n                    This prop allows to render table in non-sticky mode, even when browser supports position: sticky. <br />\r\n                    <a href=\"https://github.com/nowaalex/af-virtual-scroll/blob/master/src/utils/isPositionStickySupported/index.js\" target=\"_blank\">\r\n                        Util implementation\r\n                    </a>\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>RowComponent</h4>\r\n                <p>\r\n                    <a href=\"https://github.com/nowaalex/af-virtual-scroll/blob/master/src/Table/common/Row.js\" target=\"_blank\">\r\n                        Default implementation\r\n                    </a>\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>CellComponent</h4>\r\n                <p>\r\n                    <a href=\"https://github.com/nowaalex/af-virtual-scroll/blob/master/src/Table/common/Cell.js\" target=\"_blank\">\r\n                        Default implementation\r\n                    </a>\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>TotalsCellComponent</h4>\r\n                <p>\r\n                    <a href=\"https://github.com/nowaalex/af-virtual-scroll/blob/master/src/Table/common/TotalsCell.js\" target=\"_blank\">\r\n                        Default implementation\r\n                    </a>\r\n                </p>\r\n            </li>\r\n            <li>\r\n                <h4>getCellProps(rowData,columnIndex)</h4>\r\n                <p>\r\n                    Returns an object of extra props, that will be passed to td.\r\n                    Hooks also can be called here.\r\n                </p>\r\n            </li>\r\n        </ul>\r\n    </Fragment>\r\n);\r\n\r\nexport default Basic;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { css } from \"@emotion/core\";\r\nimport Basic from \"./basic\";\r\n\r\nconst DocPages = {\r\n    basic: Basic\r\n};\r\n\r\nconst wrapperCss = css`\r\n    text-align: left;\r\n    margin-left: 1em;\r\n\r\n    [data-required] {\r\n        &:after{\r\n            color: #780b0b;\r\n            content: \" (required)\";\r\n        }\r\n    }\r\n`;\r\n\r\nconst Docs = () => {\r\n    const { docpage } = useParams();\r\n    const PageComponent = docpage && DocPages[ docpage ];\r\n\r\n    return PageComponent ? (\r\n        <div css={wrapperCss}>\r\n            <PageComponent />\r\n        </div>\r\n    ) : \"Page not found\";\r\n};\r\n\r\nexport default Docs;","import React from \"react\";\r\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport js from \"react-syntax-highlighter/dist/esm/languages/prism/jsx\";\r\nimport codeStyle from \"react-syntax-highlighter/dist/esm/styles/prism/vs-dark\";\r\nimport { css } from \"@emotion/core\";\r\n\r\nSyntaxHighlighter.registerLanguage( \"javascript\", js );\r\n\r\nconst customStyle = {\r\n    borderRadius: \"none\",\r\n    margin: 0\r\n};\r\n\r\nconst codeCss = css`\r\n    font-size: 0.9em;\r\n`;\r\n\r\nconst Code = props => (\r\n    <SyntaxHighlighter\r\n        css={codeCss}\r\n        language=\"javascript\"\r\n        style={codeStyle}\r\n        customStyle={customStyle}\r\n        {...props}\r\n    />\r\n);\r\n\r\nexport default Code;"],"sourceRoot":""}