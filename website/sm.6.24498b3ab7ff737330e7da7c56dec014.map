{"version":3,"sources":["webpack:///./node_modules/raw-loader/dist/cjs.js \\.js$","webpack:///./websiteSrc/examples/list/simple.js?c258","webpack:///./websiteSrc/examples/list/withFeatures.js?b27a","webpack:///./websiteSrc/examples/table/formatCells.js?0cdc","webpack:///./websiteSrc/examples/table/headless.js?86aa","webpack:///./websiteSrc/examples/table/nonSticky.js?5049","webpack:///./websiteSrc/examples/table/observableCells.js?0aae","webpack:///./websiteSrc/examples/table/scrollToRow.js?8557","webpack:///./websiteSrc/examples/table/simple.js?46e1","webpack:///./websiteSrc/examples/table/sortable.js?a63c","webpack:///./websiteSrc/examples/table/styledColumns.js?2875","webpack:///./websiteSrc/examples/table/totals.js?dd6d","webpack:///./websiteSrc/examples/table/variableRowHeights.js?d7d6","webpack:///./websiteSrc/examples lazy \\.js$","webpack:///./websiteSrc/routes.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackAsyncContext","Promise","then","ids","all","slice","toArr","obj","arr","v","a","k","find","el","name","children","push","path","Code","require","Components","groupedMenu","reduce","acc","set","split","ComponentsMap","lazy","ExamplesMenu"],"mappings":"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","file":"6.ec1cad2a129982bce966.js","sourcesContent":["var map = {\n\t\"./list/simple.js\": 164,\n\t\"./list/withFeatures.js\": 165,\n\t\"./table/formatCells.js\": 166,\n\t\"./table/headless.js\": 167,\n\t\"./table/nonSticky.js\": 168,\n\t\"./table/observableCells.js\": 169,\n\t\"./table/scrollToRow.js\": 170,\n\t\"./table/simple.js\": 171,\n\t\"./table/sortable.js\": 172,\n\t\"./table/styledColumns.js\": 173,\n\t\"./table/totals.js\": 174,\n\t\"./table/variableRowHeights.js\": 175\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 163;","export default \"import React from \\\"react\\\";\\nimport List from \\\"af-virtual-scroll/lib/List\\\";\\n\\nconst getRowData = index => `row ${index}`;\\n\\nconst SimpleList = ({ className }) => (\\n    <List\\n        fixedSize\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={500000}\\n    />\\n);\\n\\nexport default SimpleList;\";","export default \"import React, { useRef } from \\\"react\\\";\\nimport List from \\\"af-virtual-scroll/lib/List\\\";\\nimport r from \\\"lodash/random\\\";\\nimport times from \\\"lodash/times\\\";\\nimport { css } from \\\"@emotion/core\\\";\\n\\nconst wrapperCss = css`\\n    display: flex;\\n    flex-flow: column nowrap;\\n`;\\n\\nconst rowCount = 100000;\\n\\nconst heights = times( rowCount, () => r( 50, 250 ) );\\n\\nconst getRowData = index => (\\n    <div style={{\\n        lineHeight: `${heights[index]}px`,\\n        borderTop: \\\"1px solid #666\\\",\\n        background: `hsl(${r(0,360)},${r(30,80)}%,${r(30,80)}%)`\\n    }}>\\n        row{index}:&nbsp;{heights[index]}px\\n    </div>\\n);\\n\\nconst ListWithScrollToRowButton = ({ className }) => {\\n\\n    const dataRef = useRef();\\n\\n    const submitHandler = e => {\\n        e.preventDefault();\\n        const v = e.currentTarget.elements.scrollRow.value;\\n        dataRef.current.scrollToRow( +v );\\n    };\\n\\n    return (\\n        <div css={wrapperCss} className={className}>\\n            <form onSubmit={submitHandler}>\\n                <label>\\n                    Row:&nbsp;\\n                    <input\\n                        name=\\\"scrollRow\\\"\\n                        type=\\\"number\\\"\\n                        defaultValue=\\\"0\\\"\\n                    />\\n                </label>\\n                <button type=\\\"submit\\\">\\n                    Scroll\\n                </button>\\n            </form>\\n            <List\\n                dataRef={dataRef}\\n                getRowData={getRowData}\\n                rowCount={rowCount}\\n            />\\n        </div>\\n    );\\n};\\n\\nexport default ListWithScrollToRowButton;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport r from \\\"lodash/random\\\";\\nimport times from \\\"lodash/times\\\";\\nimport faker from \\\"faker\\\";\\n\\nconst DFMT = new Intl.DateTimeFormat();\\nconst NFMT = new Intl.NumberFormat();\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"num\\\",\\n        label: \\\"Numeric\\\",\\n        sort: \\\"numeric\\\",\\n        format: cellData => NFMT.format( cellData ),\\n    },\\n    {\\n        dataKey: \\\"str\\\",\\n        label: \\\"String\\\",\\n        sort: \\\"locale\\\"\\n    },\\n    {\\n        dataKey: \\\"timeStamp\\\",\\n        label: \\\"Date\\\",\\n        format: cellData => DFMT.format( cellData ),\\n        sort: \\\"numeric\\\"\\n    }\\n];\\n\\nconst rowCount = 5000;\\n\\nconst rows = times( rowCount, () => ({\\n    num: r( 1, 20000 ) / 27,\\n    str: faker.name.findName(),\\n    timeStamp: r( 0, Date.now() )\\n}));\\n\\nconst getRowData = index => rows[ index ];\\n\\nconst TableWithFormattedCell = ({ className }) => (\\n    <Table\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={rowCount}\\n        columns={columns}\\n    />\\n);\\n\\nexport default TableWithFormattedCell;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"a\\\",\\n        label: \\\"a\\\"\\n    },\\n    {\\n        dataKey: \\\"b\\\",\\n        label: \\\"b\\\"\\n    },\\n    {\\n        dataKey: \\\"c\\\",\\n        label: \\\"c\\\"\\n    }\\n];\\n\\nconst getRowData = index => ({\\n    a: index,\\n    b: `cell_b_row: ${index}`,\\n    c: `cell_c_row: ${index}`\\n})\\n\\nconst SimpleHeadlessTable = ({ className }) => (\\n    <Table\\n        className={className}\\n        headless\\n        getRowData={getRowData}\\n        rowCount={500}\\n        columns={columns}\\n    />\\n);\\n\\nexport default SimpleHeadlessTable;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"a\\\",\\n        label: \\\"a\\\"\\n    },\\n    {\\n        dataKey: \\\"b\\\",\\n        label: \\\"b\\\"\\n    },\\n    {\\n        dataKey: \\\"c\\\",\\n        label: \\\"c\\\"\\n    }\\n];\\n\\nconst getRowData = index => ({\\n    a: index,\\n    b: `cell_b_row: ${index}`,\\n    c: `cell_c_row: ${index}`\\n})\\n\\nconst NonStickyTable = ({ className }) => (\\n    <Table\\n        className={className}\\n        getRowData={getRowData}\\n        nonSticky\\n        rowCount={500}\\n        columns={columns}\\n    />\\n);\\n\\nexport default NonStickyTable;\";","export default \"import React, { memo, useEffect, useState, useCallback } from \\\"react\\\";\\nimport { observable } from \\\"mobx\\\";\\nimport { observer } from \\\"mobx-react-lite\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport DefaultCellComponent from \\\"af-virtual-scroll/lib/Table/common/Cell\\\";\\nimport r from \\\"lodash/random\\\";\\nimport { css } from \\\"@emotion/core\\\";\\n\\nconst hueBlockCss = css`\\n    padding: 0.5em;\\n    border-radius: 5px;\\n`;\\n\\nconst renderHue = cellData => (\\n    <div\\n        css={hueBlockCss}\\n        style={{ background: `hsl(${cellData},90%,70%)` }}\\n    >\\n        hue:&nbsp;{cellData}\\n    </div>\\n)\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"n1\\\",\\n        label: \\\"N1\\\",\\n        width: 100,\\n        render: renderHue\\n    },\\n    {\\n        dataKey: \\\"n2\\\",\\n        label: \\\"N2\\\",\\n        width: 100,\\n        render: renderHue\\n    },\\n    {\\n        dataKey: \\\"n3\\\",\\n        label: \\\"N3\\\",\\n        width: 100,\\n        render: renderHue\\n    }\\n];\\n\\nconst rowCount = 200;\\n\\nconst CellComponent = memo(observer(DefaultCellComponent))\\n\\nconst TableWithObservableRows = ({ className }) => {\\n\\n    const [ rows ] = useState(() => {\\n        const r = observable([]);\\n\\n        for( let j = 0; j < rowCount; j++ ){\\n            r.push({ n1: 0, n2: 0, n3: 0 });\\n        }\\n\\n        return r;\\n    });\\n\\n    /* useCallback prevents table from unnecessary rerenders */\\n    const getRowData = useCallback( index => rows[ index ], [ rows ]);\\n\\n    useEffect(() => {\\n        const intervalHandle = setInterval(() => {\\n            for( let j = 0; j < 50; j++ ){\\n                rows[r(0,rowCount-1)][ `n${r(1,3)}` ] = r( 0, 360 );\\n            }\\n        }, 1000 );\\n\\n        return () => {\\n            clearInterval( intervalHandle );\\n        };\\n    }, [ rows ]);\\n\\n    return (\\n        <Table\\n            className={className}\\n            CellComponent={CellComponent}\\n            getRowData={getRowData}\\n            rowCount={rowCount}\\n            columns={columns}\\n        />\\n    );\\n};\\n\\nexport default TableWithObservableRows;\";","export default \"import React, { useRef } from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport { css } from \\\"@emotion/core\\\";\\n\\nconst wrapperCss = css`\\n    display: flex;\\n    flex-flow: column nowrap;\\n`;\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"a\\\",\\n        label: \\\"a\\\"\\n    },\\n    {\\n        dataKey: \\\"b\\\",\\n        label: \\\"b\\\"\\n    },\\n    {\\n        dataKey: \\\"c\\\",\\n        label: \\\"c\\\"\\n    }\\n];\\n\\nconst getRowData = index => ({\\n    a: index,\\n    b: `cell_b_row: ${index}`,\\n    c: `cell_c_row: ${index}`\\n})\\n\\nconst TableWithScrollToRowButton = ({ className }) => {\\n\\n    const dataRef = useRef();\\n\\n    const submitHandler = e => {\\n        e.preventDefault();\\n        const v = e.currentTarget.elements.scrollRow.value;\\n        dataRef.current.scrollToRow( +v );\\n    };\\n\\n    return (\\n        <div css={wrapperCss} className={className}>\\n            <form onSubmit={submitHandler}>\\n                <label>\\n                    Row:&nbsp;\\n                    <input\\n                        name=\\\"scrollRow\\\"\\n                        type=\\\"number\\\"\\n                        defaultValue=\\\"0\\\"\\n                    />\\n                </label>\\n                <button type=\\\"submit\\\">\\n                    Scroll\\n                </button>\\n            </form>\\n            <Table\\n                dataRef={dataRef}\\n                getRowData={getRowData}\\n                rowCount={50000}\\n                columns={columns}\\n            />\\n        </div>\\n    );\\n};\\n\\nexport default TableWithScrollToRowButton;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/src/Table\\\";\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"a\\\",\\n        label: \\\"a\\\"\\n    },\\n    {\\n        dataKey: \\\"b\\\",\\n        label: \\\"b\\\"\\n    },\\n    {\\n        dataKey: \\\"c\\\",\\n        label: \\\"c\\\"\\n    }\\n];\\n\\nconst getRowData = index => ({\\n    a: index,\\n    b: `cell_b_row: ${index}`,\\n    c: `cell_c_row: ${index}`\\n})\\n\\nconst SimpleTable = ({ className }) => (\\n    <Table\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={500}\\n        columns={columns}\\n        estimatedRowHeight={200}\\n    />\\n);\\n\\nexport default SimpleTable;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport r from \\\"lodash/random\\\";\\nimport times from \\\"lodash/times\\\";\\nimport faker from \\\"faker\\\";\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"num\\\",\\n        label: \\\"Numeric\\\",\\n        sort: \\\"numeric\\\"\\n    },\\n    {\\n        dataKey: \\\"str\\\",\\n        label: \\\"String\\\",\\n        sort: \\\"locale\\\"\\n    }\\n];\\n\\nconst rowCount = 5000;\\n\\nconst rows = times( rowCount, () => ({\\n    num: r( 1, 20000 ),\\n    str: faker.name.findName()\\n}));\\n\\nconst getRowData = index => rows[ index ];\\n\\nconst SortableTable = ({ className }) => (\\n    <Table\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={rowCount}\\n        columns={columns}\\n    />\\n);\\n\\nexport default SortableTable;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport times from \\\"lodash/times\\\";\\nimport range from \\\"lodash/range\\\";\\nimport r from \\\"lodash/random\\\";\\nimport { css } from \\\"@emotion/core\\\";\\n\\nconst wrapperCss = css`\\n    table {\\n        border-spacing: 0;\\n    }\\n    tr[data-odd]{\\n        background: rgba(0,0,0,0.2)\\n    }\\n`;\\n\\nconst colCount = 5;\\n\\nconst getRowExtraProps = ( rowData, rowDataIndex ) => rowDataIndex % 2 ? { \\\"data-odd\\\": \\\"\\\" } : null;\\n\\nconst columns = times( colCount, colIndex => ({\\n    dataKey: `col${colIndex}`,\\n    label: `col${colIndex}`,\\n    background: `hsl(${Math.floor(360/colCount*colIndex)},80%,80%)`,\\n    width: r( 50, 300 )\\n}));\\n\\nconst getRowData = index => range( colCount ).reduce(( acc, colIndex ) => {\\n    acc[ `col${colIndex}` ] = index;\\n    return acc;\\n}, {});\\n\\nconst totals = range( colCount ).reduce(( acc, colIndex ) => {\\n    acc[ `col${colIndex}` ] = [ \\\"count\\\" ];\\n    return acc;\\n}, {});\\n\\nconst TableWithStyledColumns = ({ className }) => (\\n    <Table\\n        getRowExtraProps={getRowExtraProps}\\n        css={wrapperCss}\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={500}\\n        totals={totals}\\n        columns={columns}\\n    />\\n);\\n\\nexport default TableWithStyledColumns;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport r from \\\"lodash/random\\\";\\nimport times from \\\"lodash/times\\\";\\n\\nconst columns = [\\n    { dataKey: \\\"n1\\\", label: \\\"N1\\\" },\\n    { dataKey: \\\"n2\\\", label: \\\"N2\\\" },\\n    { dataKey: \\\"n3\\\", label: \\\"N3\\\" },\\n    { dataKey: \\\"n4\\\", label: \\\"N4\\\" },\\n];\\n\\nconst rowCount = 5000;\\n\\nconst rows = times( rowCount, () => ({\\n    n1: r( 1, 20000 ),\\n    n2: r( 1, 20000 ),\\n    n3: r( 1, 20000 ),\\n    n4: r( 1, 20000 )\\n}));\\n\\nconst totals = {\\n    n1: [ \\\"count\\\" ],\\n    n2: [ \\\"sum\\\", \\\"max\\\" ],\\n    n3: [ \\\"average\\\", \\\"min\\\" ],\\n    n4: [ \\\"count\\\", \\\"sum\\\", \\\"average\\\" ]\\n};\\n\\nconst getRowData = index => rows[ index ];\\n\\nconst TableWithTotals = ({ className }) => (\\n    <Table\\n        className={className}\\n        getRowData={getRowData}\\n        rowCount={rowCount}\\n        columns={columns}\\n        totals={totals}\\n    />\\n);\\n\\nexport default TableWithTotals;\";","export default \"import React from \\\"react\\\";\\nimport Table from \\\"af-virtual-scroll/lib/Table\\\";\\nimport r from \\\"lodash/random\\\";\\nimport times from \\\"lodash/times\\\";\\nimport faker from \\\"faker\\\";\\n\\nconst columns = [\\n    {\\n        dataKey: \\\"rowIndex\\\",\\n        label: \\\"Row index\\\",\\n        getCellData: ( rowData, i ) => i\\n    },\\n    {\\n        dataKey: \\\"num\\\",\\n        label: \\\"Numeric\\\",\\n        sort: \\\"numeric\\\"\\n    },\\n    {\\n        dataKey: \\\"str\\\",\\n        label: \\\"String\\\",\\n        sort: \\\"locale\\\"\\n    },\\n    {\\n        dataKey: \\\"rect\\\",\\n        label: \\\"Rectangle\\\",\\n        render: cellData => (\\n            <div style={{\\n                lineHeight: `${cellData}px`,\\n                background: `hsl(${r(0,360)},50%,50%)`\\n            }}>\\n                height: {cellData}px\\n            </div>\\n        )\\n    }\\n];\\n\\nconst rowCount = 100000;\\n\\nconst rows = times( rowCount, () => ({\\n    num: r( 1, 20000 ),\\n    str: faker.name.findName(),\\n    rect: r( 50, 250 )\\n}));\\n\\nconst getRowData = index => rows[ index ];\\n\\nconst totals = {\\n    num: [ \\\"sum\\\", \\\"count\\\" ]\\n};\\n\\nconst VariableRowHeightsTable = ({ className }) => (\\n    <Table\\n        className={className}\\n        totals={totals}\\n        getRowData={getRowData}\\n        estimatedRowHeight={300}\\n        rowCount={rowCount}\\n        columns={columns}\\n    />\\n);\\n\\nexport default VariableRowHeightsTable;\";","var map = {\n\t\"./list/simple.js\": [\n\t\t211,\n\t\t0,\n\t\t1,\n\t\t19\n\t],\n\t\"./list/withFeatures.js\": [\n\t\t268,\n\t\t0,\n\t\t1,\n\t\t10\n\t],\n\t\"./table/formatCells.js\": [\n\t\t269,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t11\n\t],\n\t\"./table/headless.js\": [\n\t\t1319,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t20\n\t],\n\t\"./table/nonSticky.js\": [\n\t\t1320,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t21\n\t],\n\t\"./table/observableCells.js\": [\n\t\t1321,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t12\n\t],\n\t\"./table/scrollToRow.js\": [\n\t\t1322,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t22\n\t],\n\t\"./table/simple.js\": [\n\t\t1330,\n\t\t1,\n\t\t2,\n\t\t23\n\t],\n\t\"./table/sortable.js\": [\n\t\t1323,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t13\n\t],\n\t\"./table/styledColumns.js\": [\n\t\t1324,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t9,\n\t\t24\n\t],\n\t\"./table/totals.js\": [\n\t\t1328,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t14\n\t],\n\t\"./table/variableRowHeights.js\": [\n\t\t1329,\n\t\t0,\n\t\t3,\n\t\t1,\n\t\t2,\n\t\t15\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 176;\nmodule.exports = webpackAsyncContext;","import set from \"lodash/set\";\nimport { lazy } from \"react\";\n\nconst toArr = ( obj, arr ) => {\n    let v, a;\n    for( let k in obj ) {\n        v = obj[ k ];\n        if( typeof v === \"object\" ){\n            a = arr.find( el => el.name === k );\n            if( !a ){\n                a = { name: k, children: [] };\n                arr.push( a );\n            }\n            toArr( v, a.children );\n        } else {\n            arr.push({\n                name: k,\n                path: `/examples/${v}`\n            });\n        }\n    }\n    return arr;\n}\n\nconst Code = require.context( \"!!raw-loader!./examples\", true, /\\.js$/ );\nconst Components = require.context( \"./examples\", true, /\\.js$/, \"lazy\" );\n\nconst groupedMenu = Components.keys().reduce(( acc, path ) => set(\n    acc,\n    path.slice( 2, -3 ).split( \"/\" ),\n    path.slice( 2, -3 )\n), {});\n\nexport const ComponentsMap = Components.keys().reduce(( acc, path ) => {\n    acc[ path.slice( 2, -3 ) ] = [\n        lazy(() => Components( path )),\n        Code( path ).default,\n        path.slice( 2, -3 )\n    ];\n    return acc;\n}, {});\n\nexport const ExamplesMenu = toArr( groupedMenu, [] );"],"sourceRoot":""}